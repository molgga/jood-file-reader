{"version":3,"sources":["./src/app/pages/demo/blob-image/blob-image.component.html","./src/app/pages/demo/read-stream/read-stream.component.html","../packages/src/blob-image/BlobImageResize.ts","../packages/src/blob-image/index.ts","../packages/src/blob-image/types.ts","../packages/src/public-api.ts","../packages/src/read-stream/FileReadStream.ts","../packages/src/read-stream/index.ts","../packages/src/read-stream/types.ts","./src/app/modules/example/common/common.module.ts","./src/app/pages/demo/blob-image/blob-image.component.scss","./src/app/pages/demo/blob-image/blob-image.component.ts","./src/app/pages/demo/demo.module.ts","./src/app/pages/demo/demo.routing.ts","./src/app/pages/demo/read-stream/read-stream.component.scss","./src/app/pages/demo/read-stream/read-stream.component.ts"],"names":[],"mappings":"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","file":"dev-app-pages-demo-demo-module-es2015.js","sourcesContent":["export default \"<p>\\n  @TODO - blob-image works!\\n</p>\\n\";","export default \"<div>\\n  <mat-form-field>\\n    <mat-label>test chunk size</mat-label>\\n    <mat-select [(ngModel)]=\\\"testChunkSize\\\">\\n      <mat-option *ngFor=\\\"let chunk of optionChunkList\\\" [value]=\\\"chunk.value\\\">{{\\n        chunk.label\\n      }}</mat-option>\\n    </mat-select>\\n  </mat-form-field>\\n\\n  <br />\\n  <br />\\n  @TODO - test option: responseType = BUFFER | BLOB\\n  <br />\\n  <br />\\n  <br />\\n</div>\\n\\n<div>\\n  <input type=\\\"file\\\" (change)=\\\"onFileChange($event)\\\" />\\n</div>\\n\\n<hr class=\\\"partition\\\" />\\n\\n<div class=\\\"print-stack\\\">\\n  <div class=\\\"stack-opt\\\">\\n    <button mat-raised-button color=\\\"warn\\\" [disabled]=\\\"!reader\\\" (click)=\\\"onFileAbort($event)\\\">\\n      abort\\n    </button>\\n    <div class=\\\"spacer\\\"></div>\\n    <div class=\\\"stack-count\\\">read count: {{ changeStackCount }}</div>\\n  </div>\\n  <div class=\\\"stack-list\\\">\\n    <div *ngFor=\\\"let fileEvent of changeStack\\\" class=\\\"stack-item\\\">\\n      <div class=\\\"aside\\\">\\n        {{ fileEvent.type }}\\n      </div>\\n      <div *ngIf=\\\"fileEvent.state\\\" class=\\\"bside\\\">\\n        <span class=\\\"label\\\">\\n          <span class=\\\"dt\\\">readed</span>\\n          <span class=\\\"dd\\\">{{ fileEvent.state.readed }}</span>\\n        </span>\\n        <span class=\\\"label\\\">\\n          <span class=\\\"dt\\\">total</span>\\n          <span class=\\\"dd\\\">{{ fileEvent.state.total }}</span>\\n        </span>\\n        <span class=\\\"label\\\">\\n          <span class=\\\"dt\\\">percent</span>\\n          <span class=\\\"dd\\\">{{ (fileEvent.state.readed / fileEvent.state.total).toFixed(2) }}</span>\\n        </span>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\";","/* eslint-disable */\nimport { ResizeType, ResizeConfig, ResizeResult, DrawBound } from './types';\n\n/**\n * Blob 이미지 리사이즈 용\n * Blob -> Canvas&Image resize -> Blob.\n * @class BlobImageResize\n * @example\n  const someBlob = new Blob([file], { type: file.type });\n  const resizer = new BlobImageResize(someBlob, {\n    expectWidth: 200,\n    expectHeight: 200,\n    resizeType: ResizeType.COVER\n  });\n  const { blob } = await resizer.create();\n  const url = URL.createObjectURL(blob);\n  const revoke = () => {\n    URL.revokeObjectURL(url);\n  };\n  // ...\n  <img :src=\"url\" @load=\"revoke\" @error=\"revoke\" alt=\"\" />\n */\nexport class BlobImageResize {\n  /**\n   * @param {Blob} blob 변경할 원본 Blob\n   * @param {ResizeConfig} [config={}] 리사이징 옵션\n   */\n  constructor(blob: Blob, config: ResizeConfig = {}) {\n    this.blob = blob;\n    const {\n      expectWidth = 2000,\n      expectHeight = 2000,\n      quality = 0.9,\n      resizeType = ResizeType.SCALE,\n    } = config;\n    this.quality = quality;\n    this.maxWidth = expectWidth;\n    this.maxHeight = expectHeight;\n    this.resizeType = resizeType;\n  }\n\n  // 리사이징 대상 Blob\n  protected blob: Blob;\n  // 리사이징 대상 Blob 의 URL\n  protected blobURL: string;\n  // 리사이징 대상 Blob 을 로드할 이미지\n  protected domImage: HTMLImageElement;\n  // 리사이징 대상 이미지를 그려낼 캔버스\n  protected domCanvas: HTMLCanvasElement;\n  protected domCanvasContext: CanvasRenderingContext2D;\n  // 캔버스에서 만들어낼 이미지 퀄리티\n  protected quality: number;\n  // 리사이징 최대 사이즈\n  protected maxWidth: number;\n  protected maxHeight: number;\n  // 리사이징 할 때 캔버스에 그려낼 사이즈 타입\n  protected resizeType: ResizeType;\n  // 리사이징 완료된 Blob\n  protected resizeBlob: Blob;\n  // 응답용 promize\n  protected promise: Promise<ResizeResult>;\n  protected promiseResolve: (value: ResizeResult) => void;\n  protected promiseReject: (reason?: any) => void;\n\n  /**\n   * 리사이징 타입 - SCALE 형\n   * 정해진 expect 사이즈를 최대 사이즈로 비율에 맞춤.\n   * @param {number} sw\n   * @param {number} sh\n   * @returns {DrawBound}\n   * @example\n    const resizer = new BlobImageResize(null, { expectWidth: 200, expectHeight: 200 });\n    // dx, dy 모두 0\n    console.log(resizer.getResizeToScale(100, 100)); // 결과이미지: 100x100\n    console.log(resizer.getResizeToScale(100, 200)); // 결과이미지: 100x200\n    console.log(resizer.getResizeToScale(100, 300)); // 결과이미지: 66x200\n    console.log(resizer.getResizeToScale(200, 100)); // 결과이미지: 200x100\n    console.log(resizer.getResizeToScale(200, 200)); // 결과이미지: 200x200\n    console.log(resizer.getResizeToScale(200, 300)); // 결과이미지: 133x200\n    console.log(resizer.getResizeToScale(300, 100)); // 결과이미지: 200x66\n    console.log(resizer.getResizeToScale(300, 200)); // 결과이미지: 200x133\n    console.log(resizer.getResizeToScale(300, 300)); // 결과이미지: 200x200\n   */\n  getResizeToScale(sw: number, sh: number): DrawBound {\n    const dx: number = 0;\n    const dy: number = 0;\n    let dw: number = 0;\n    let dh: number = 0;\n    const isLandscape: boolean = sh <= sw;\n    if (isLandscape) {\n      dw = Math.min(this.maxWidth, sw);\n      dh = Math.floor((dw / sw) * sh);\n    } else {\n      dh = Math.min(this.maxWidth, sh);\n      dw = Math.floor((dh / sh) * sw);\n    }\n    return {\n      dx,\n      dy,\n      dw,\n      dh,\n    };\n  }\n\n  /**\n   * 리사이징 타입 - COVER 형\n   * 정해진 expect 사이즈에 빈 여백 없이 맞춤, 원본 이미지가 작으면 늘리고, 넘치면 잘려나감.\n   * @param {number} sw\n   * @param {number} sh\n   * @returns {DrawBound}\n   * @example\n    const resizer = new BlobImageResize(null, { expectWidth: 200, expectHeight: 200 });\n    // 결과 이미지 모두 200x200\n    console.log(resizer.getResizeToCover(100, 100)); // {dx: 0, dy: 0, dw: 200, dh: 200}\n    console.log(resizer.getResizeToCover(100, 200)); // {dx: 0, dy: -100, dw: 200, dh: 400}\n    console.log(resizer.getResizeToCover(100, 300)); // {dx: 0, dy: -200, dw: 200, dh: 600}\n    console.log(resizer.getResizeToCover(200, 100)); // {dx: -100, dy: 0, dw: 400, dh: 200}\n    console.log(resizer.getResizeToCover(200, 200)); // {dx: 0, dy: 0, dw: 200, dh: 200}\n    console.log(resizer.getResizeToCover(200, 300)); // {dx: 0, dy: -50, dw: 200, dh: 300}\n    console.log(resizer.getResizeToCover(300, 100)); // {dx: -200, dy: 0, dw: 600, dh: 200}\n    console.log(resizer.getResizeToCover(300, 200)); // {dx: -50, dy: 0, dw: 300, dh: 200}\n    console.log(resizer.getResizeToCover(300, 300)); // {dx: 0, dy: 0, dw: 200, dh: 200}\n   */\n  getResizeToCover(sw: number, sh: number): DrawBound {\n    let dx: number = 0;\n    let dy: number = 0;\n    let dw: number = 0;\n    let dh: number = 0;\n    let expectRatio: number = this.maxWidth / this.maxHeight;\n    let contentRatio: number = sw / sh;\n    if (expectRatio < contentRatio) {\n      dh = this.maxHeight;\n      dw = this.maxHeight * contentRatio;\n    } else {\n      dw = this.maxWidth;\n      dh = this.maxWidth / contentRatio;\n    }\n    dx = (this.maxWidth - dw) * 0.5;\n    dy = (this.maxHeight - dh) * 0.5;\n    return {\n      dx,\n      dy,\n      dw,\n      dh,\n    };\n  }\n\n  /**\n   * 이미지 로드 완료\n   * @protected\n   */\n  protected onImageLoaded() {\n    URL.revokeObjectURL(this.blobURL);\n    const imageWidth = this.domImage.naturalWidth;\n    const imageHeight = this.domImage.naturalHeight;\n    let drawBound: DrawBound;\n    if (this.resizeType === ResizeType.COVER) {\n      drawBound = this.getResizeToCover(imageWidth, imageHeight);\n      this.domCanvas.width = this.maxWidth;\n      this.domCanvas.height = this.maxHeight;\n    } else {\n      drawBound = this.getResizeToScale(imageWidth, imageHeight);\n      this.domCanvas.width = drawBound.dw;\n      this.domCanvas.height = drawBound.dh;\n    }\n    const { dx, dy, dw, dh } = drawBound;\n    this.domCanvasContext.drawImage(this.domImage, 0, 0, imageWidth, imageHeight, dx, dy, dw, dh);\n    // this.domCanvas.toBlob(this.onResized.bind(this), this.blob.type, this.quality);\n    this.domCanvas.toBlob(this.onResized.bind(this), 'image/jpeg', this.quality); // type 이 jpeg 로 하지 않는 경우 quality 적용이 안되는듯\n  }\n\n  /**\n   * 이미지 로드 오류\n   * @protected\n   */\n  protected onImageError() {\n    URL.revokeObjectURL(this.blobURL);\n    this.promiseReject({\n      ...this.getState(),\n      error: new Error('image load error'),\n    });\n  }\n\n  /**\n   * 이미지 리사이징 완료\n   * @protected\n   * @param {Blob} resizeBlob\n   */\n  protected onResized(resizeBlob: Blob) {\n    this.resizeBlob = resizeBlob;\n    this.promiseResolve(this.getState());\n  }\n\n  /**\n   * 리사이징 이미지 생성하기\n   * @returns {Promise<ResizeResult>}\n   */\n  create(): Promise<ResizeResult> {\n    this.domCanvas = document.createElement('canvas');\n    this.domCanvasContext = this.domCanvas.getContext('2d');\n    this.domImage = new Image();\n    this.domImage.onload = this.onImageLoaded.bind(this);\n    this.domImage.onerror = this.onImageError.bind(this);\n    this.promise = new Promise((resolve, reject) => {\n      this.promiseResolve = resolve;\n      this.promiseReject = reject;\n      try {\n        this.blobURL = URL.createObjectURL(this.blob);\n        this.domImage.src = this.blobURL;\n      } catch (err) {\n        this.promiseReject({\n          ...this.getState(),\n          error: err,\n        });\n      }\n    });\n    return this.promise;\n  }\n\n  getState(): ResizeResult {\n    const blob = this.resizeBlob || null;\n    const { width = 0, height = 0 } = this.domCanvas || {};\n    return {\n      blob: blob,\n      width: blob ? width : 0,\n      height: blob ? height : 0,\n    };\n  }\n}\n","export * from './types';\nexport * from './BlobImageResize';\n","/**\n * 리사이즈 타입\n *  - SCALE: 최대 크기에 맞춤, 이미지 비율 유지.\n *  - COVER: 최대 크기에 맞춤, 이미지 넘치면 잘라냄.\n * @export\n * @enum {number}\n */\nexport enum ResizeType {\n  SCALE,\n  COVER,\n}\n\n/**\n * 리사이즈 옵션\n * @export\n * @interface ResizeConfig\n */\nexport interface ResizeConfig {\n  /**\n   * 리사이즈 예상 width\n   * @type {number}\n   */\n  expectWidth?: number;\n  /**\n   * 리사이즈 예상 height\n   * @type {number}\n   */\n  expectHeight?: number;\n  /**\n   * 이미지 품질\n   * @type {number}\n   */\n  quality?: number;\n  /**\n   * 리사이즈 타입\n   * @type {ResizeType}\n   */\n  resizeType?: ResizeType;\n}\n\n/**\n * 리사이즈 결과\n * @export\n * @interface ResizeResult\n */\nexport interface ResizeResult {\n  /**\n   * 리사이즈 된 Blob\n   * @type {Blob}\n   */\n  blob: Blob;\n  /**\n   * 리사이즈 된 width 사이즈\n   * @type {number}\n   */\n  width: number;\n  /**\n   * 리사이즈 된 height 사이즈\n   * @type {number}\n   */\n  height: number;\n  /**\n   * 오류가 있는 경우\n   * @type {*}\n   * @memberof ResizeResult\n   */\n  error?: any;\n}\n\n/**\n * 리사이즈 계산 정보\n * @interface DrawBound\n */\nexport interface DrawBound {\n  dx: number;\n  dy: number;\n  dw: number;\n  dh: number;\n}\n","export * from \"./read-stream\";\nexport * from \"./blob-image\";\n","/* eslint-disable */\nimport { Subject, Observable } from 'rxjs';\nimport {\n  FileReadEventType,\n  FileReadEvent,\n  FileReadState,\n  FileReadConfig,\n  FileReadResponseType,\n} from './types';\n\n/**\n * 파일 스트림 읽기.\n * FileReader 사용시 한번에 못 읽는 용량 끊어서 읽기 용.\n * @class FileReadStream\n * @example\n  const onFileInputChange = async (evt: Event) => {\n    const target = evt.target as HTMLInputElement;\n    const file = target.files[0];\n    const reader = new FileReadStream(file, { chunkSize: 1024 * 10 });\n    // reader.observeState().subscribe({ type, state } => console.log(state.readed));\n    const { type, state } = await reader.start();\n    if (type === FileReadEventType.RESOLVE) {\n      console.log(state.blob);\n    } else if (type === FileReadEventType.REJECT) {\n      console.log('error');\n    }\n  }\n */\nexport class FileReadStream {\n  /**\n   * @param {File} file FileReader 로 읽을 파일\n   * @param {FileReadConfig} [config={}] 스트림 옵션\n   */\n  constructor(file: File, config: FileReadConfig = {}) {\n    this.readFile = file;\n    this.reader = new FileReader();\n    this.reader.onload = this.onReaderLoaded.bind(this);\n    this.reader.onerror = this.onReaderError.bind(this);\n    this.subjectState = new Subject();\n    const { chunkSize = 1024 * 1024 * 10, responseType = FileReadResponseType.BLOB } = config;\n    this.readChunkSize = chunkSize;\n    this.responseType = responseType;\n  }\n\n  // 변경사항 알리미 @see https://rxjs-dev.firebaseapp.com\n  protected subjectState: Subject<FileReadEvent>;\n  // 파일 리더\n  protected reader: FileReader;\n  // 읽을 파일\n  protected readFile: File;\n  // 읽기 시작 여부\n  protected readStarted: boolean = false;\n  // 1회 읽을량\n  protected readChunkSize: number;\n  // 현재 읽기 offset\n  protected readOffset: number = 0;\n  // 현재 읽어야할 offset\n  protected readOffsetNext: number = 0;\n  // 현재 읽은량\n  protected readCurrent: number = 0;\n  // 현재 취소 상태인지 확인용\n  protected readStateAbort: boolean = false;\n  // 읽은 버퍼\n  protected buffers: ArrayBuffer[] = [];\n  // 응답시 파일 타입\n  protected responseType: FileReadResponseType;\n  // subjectState 로 진행(완료) 상태를 받을 수 있지만, 편의용 async/await 도 제공\n  protected readPromise: Promise<FileReadEvent>;\n  protected readPromiseResolve: (value: FileReadEvent) => void;\n  protected readPromiseReject: (reason?: any) => void;\n\n  /**\n   * 파일 읽기 1회 완료\n   * @protected\n   * @param {Event} evt\n   */\n  protected onReaderLoaded(evt: Event) {\n    this.readCurrent = this.readOffsetNext;\n    this.readOffset += this.readChunkSize;\n    this.buffers.push(this.reader.result as ArrayBuffer);\n    this.stateChanged();\n    this.next();\n  }\n\n  /**\n   * 파일 읽기 1회 오류\n   * @protected\n   * @param {Event} evt\n   */\n  protected onReaderError(evt: Event) {\n    this.resultReject(new Error('file reader onerror event'));\n  }\n\n  /**\n   * 다음 구간 읽기\n   * @protected\n   */\n  protected next() {\n    if (this.readStateAbort) {\n      return;\n    }\n    try {\n      const maxSize = this.readFile.size;\n      if (maxSize <= this.readOffset) {\n        this.resultResolve();\n        return;\n      }\n      let expectNext = this.readOffset + this.readChunkSize;\n      if (maxSize <= expectNext) expectNext = maxSize;\n      this.readOffsetNext = expectNext;\n      const sliceBlob = this.readFile.slice(this.readOffset, this.readOffsetNext);\n      this.reader.readAsArrayBuffer(sliceBlob);\n    } catch (err) {\n      this.resultReject(err);\n    }\n  }\n\n  /**\n   * state 변경 시 알림\n   * @protected\n   */\n  protected stateChanged() {\n    this.subjectState.next({\n      type: FileReadEventType.CHANGE,\n      state: this.getState(),\n    });\n  }\n\n  /**\n   * 완료 시 알림\n   * @protected\n   */\n  protected resultResolve() {\n    const result: FileReadEvent = {\n      type: FileReadEventType.RESOLVE,\n      state: this.getState(),\n    };\n    this.reader.onload = null;\n    this.reader.onerror = null;\n    this.readPromiseResolve(result);\n    this.subjectState.next(result);\n  }\n\n  /**\n   * 실패 시 알림\n   * @protected\n   * @param {*} reason\n   */\n  protected resultReject(reason: any, type: FileReadEventType = FileReadEventType.REJECT) {\n    const result: FileReadEvent = {\n      type,\n      state: null,\n      error: reason,\n    };\n    this.reader.onload = null;\n    this.reader.onerror = null;\n    this.readPromiseReject(result);\n    this.subjectState.next(result);\n  }\n\n  /**\n   * 읽기 시작\n   * @returns {Promise<FileReadEvent>}\n   */\n  start(): Promise<FileReadEvent> {\n    if (this.readStarted) return;\n    this.readStarted = true;\n    this.readPromise = new Promise((resolve, reject) => {\n      this.readPromiseResolve = resolve;\n      this.readPromiseReject = reject;\n    });\n    this.next();\n    return this.readPromise;\n  }\n\n  /**\n   * 상태변경 옵저버\n   * @returns {Observable<FileReadEvent>}\n   */\n  observeState(): Observable<FileReadEvent> {\n    return this.subjectState.asObservable();\n  }\n\n  /**\n   * 현재 상태\n   * @returns {FileReadState}\n   */\n  getState(): FileReadState {\n    const { name = null, type = null, size = 0, lastModified = Date.now() } = this.readFile || {};\n    const state: FileReadState = {\n      fileName: name,\n      fileType: type,\n      fileSize: size,\n      fileLastModified: lastModified,\n      total: size,\n      readed: this.readCurrent,\n      responseType: this.responseType,\n      chunkSize: this.readChunkSize,\n    };\n    switch (this.responseType) {\n      case FileReadResponseType.BLOB:\n        state.blob = new Blob(this.buffers, { type });\n        break;\n      case FileReadResponseType.BUFFER:\n        state.buffers = this.buffers;\n        break;\n    }\n    return state;\n  }\n\n  /**\n   * 파일 읽기 중단\n   */\n  abort(): void {\n    this.readStateAbort = true;\n    if (this.reader) {\n      this.reader.abort();\n      this.reader.onload = null;\n      this.reader.onerror = null;\n      this.resultReject(new Error('file reader abort event'), FileReadEventType.ABORT);\n    }\n  }\n\n  /**\n   * 파기\n   */\n  destroy() {\n    if (this.reader) {\n      this.reader.abort();\n      this.reader.onload = null;\n      this.reader.onerror = null;\n      this.reader = null;\n    }\n    this.readFile = null;\n  }\n}\n","/**\n * dependencies\n * - rxjs: https://rxjs-dev.firebaseapp.com\n */\n\nexport * from './types';\nexport * from './FileReadStream';\n","/**\n * 스트림 이벤트 타입\n *  - CHANGE: 변경사항이 있음\n *  - RESOLVE: 완료\n *  - REJECT: 오류\n * @export\n * @enum {string}\n */\nexport enum FileReadEventType {\n  CHANGE = 'CHANGE',\n  RESOLVE = 'RESOLVE',\n  REJECT = 'REJECT',\n  ABORT = 'ABORT',\n}\n\n/**\n * 스트림 이벤트\n * @export\n * @interface FileReadEvent\n */\nexport interface FileReadEvent {\n  /**\n   * 이벤트 타입명\n   * @type {FileReadEventType}\n   */\n  type: FileReadEventType;\n  /**\n   * 스트림 상태\n   * @type {FileReadState}\n   */\n  state: FileReadState;\n  /**\n   * 오류\n   * @type {*}\n   */\n  error?: any;\n}\n\n/**\n * 스트림 상태 정보\n * @export\n * @interface FileReadState\n */\nexport interface FileReadState {\n  /**\n   * 파일명\n   * @type {string}\n   */\n  fileName: string;\n  /**\n   * 파일의 (Mime)타입\n   * @type {string}\n   */\n  fileType: string;\n  /**\n   * 파일의 용량\n   * @type {number}\n   */\n  fileSize: number;\n  /**\n   * 파일의 마지막 수정시간\n   * @type {number}\n   */\n  fileLastModified: number;\n  /**\n   * 읽어들인 용량\n   * @type {number}\n   */\n  readed: number;\n  /**\n   * 읽어내야할 용량(파일 용량)\n   * @type {number}\n   */\n  total: number;\n  /**\n   * 1회 읽기시 읽어들일 용량\n   * @type {number}\n   */\n  chunkSize: number;\n  /**\n   * 읽기 완료 후 반환 타입\n   * @type {FileReadResponseType}\n   */\n  responseType: FileReadResponseType;\n  /**\n   * responseType 이 BUFFER 인 경우 반환하는 ArrayBuffer[]\n   * @type {ArrayBuffer[]}\n   */\n  buffers?: ArrayBuffer[];\n  /**\n   * responseType 이 BLOB 인 경우 반환하는 Blob\n   * @type {Blob}\n   */\n  blob?: Blob;\n}\n\n/**\n * 스트림 옵션\n * @export\n * @interface FileReadConfig\n */\nexport interface FileReadConfig {\n  /**\n   * 1회에 읽어들일 용량\n   * @type {number}\n   */\n  chunkSize?: number;\n  /**\n   * 읽기 완료 후 반환 타입\n   * @type {FileReadResponseType}\n   */\n  responseType?: FileReadResponseType;\n}\n\n/**\n * 스트립 상태 정보 중 완료시 파일 타입.\n *  - BUFFER: ArrayBuffer[] 타입\n *  - BLOB: Blob 타입\n * @export\n * @enum {string}\n */\nexport enum FileReadResponseType {\n  BUFFER = 'BUFFER',\n  BLOB = 'BLOB',\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  imports: [CommonModule],\n  // exports: [SampleActorComponent],\n  // declarations: [SampleActorComponent],\n})\nexport class ExampleCommonModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJwcm9qZWN0cy9kZXYvc3JjL2FwcC9wYWdlcy9kZW1vL2Jsb2ItaW1hZ2UvYmxvYi1pbWFnZS5jb21wb25lbnQuc2NzcyJ9 */\";","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'demo-blob-image',\n  templateUrl: './blob-image.component.html',\n  styleUrls: ['./blob-image.component.scss'],\n})\nexport class BlobImageComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RoutingModule } from '~/dev/app/pages/demo/demo.routing';\nimport { SharedModule } from '~/dev/app/shared/shared.module';\nimport { ExampleCommonModule } from '~/dev/app/modules/example/common/common.module';\nimport { ReadStreamComponent } from './read-stream/read-stream.component';\nimport { BlobImageComponent } from './blob-image/blob-image.component';\n\n@NgModule({\n  imports: [CommonModule, RoutingModule, SharedModule, ExampleCommonModule],\n  declarations: [ReadStreamComponent, BlobImageComponent],\n})\nexport class PageModule {}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ReadStreamComponent } from './read-stream/read-stream.component';\nimport { BlobImageComponent } from './blob-image/blob-image.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    children: [\n      {\n        path: 'read-stream',\n        component: ReadStreamComponent,\n      },\n      {\n        path: 'blob-image',\n        component: BlobImageComponent,\n      },\n      {\n        path: '**',\n        component: ReadStreamComponent,\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class RoutingModule {}\n","export default \".partition {\\n  display: block;\\n  margin: 30px 0;\\n  padding: 0;\\n  height: 1px;\\n  border: none;\\n  background-color: #eeeeee;\\n}\\n\\n.print-stack .stack-opt {\\n  display: flex;\\n  align-items: center;\\n}\\n\\n.print-stack .stack-opt .spacer {\\n  flex: 1;\\n}\\n\\n.print-stack .stack-count {\\n  padding: 5px 0;\\n  text-align: right;\\n  font-size: 14px;\\n}\\n\\n.print-stack .stack-list {\\n  display: block;\\n  margin-top: 5px;\\n  height: 400px;\\n  overflow: auto;\\n  border: 1px solid #999999;\\n}\\n\\n.print-stack .stack-item {\\n  display: flex;\\n  align-items: center;\\n  margin: 3px;\\n  padding: 5px;\\n  font-size: 14px;\\n  border: 1px solid #cccccc;\\n  box-sizing: border-box;\\n}\\n\\n.print-stack .stack-item .aside {\\n  width: 90px;\\n}\\n\\n.print-stack .stack-item .bside {\\n  flex: 1;\\n  display: flex;\\n  flex-wrap: wrap;\\n}\\n\\n.print-stack .stack-item .label {\\n  flex: 1;\\n}\\n\\n.print-stack .stack-item .label .dt {\\n  display: block;\\n  font-size: 12px;\\n  color: #888888;\\n}\\n\\n.print-stack .stack-item .label .dd {\\n  display: block;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByb2plY3RzL2Rldi9zcmMvYXBwL3BhZ2VzL2RlbW8vcmVhZC1zdHJlYW0vcmVhZC1zdHJlYW0uY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxjQUFBO0VBQ0EsY0FBQTtFQUNBLFVBQUE7RUFDQSxXQUFBO0VBQ0EsWUFBQTtFQUNBLHlCQUFBO0FBQ0Y7O0FBR0U7RUFDRSxhQUFBO0VBQ0EsbUJBQUE7QUFBSjs7QUFDSTtFQUNFLE9BQUE7QUFDTjs7QUFFRTtFQUNFLGNBQUE7RUFDQSxpQkFBQTtFQUNBLGVBQUE7QUFBSjs7QUFFRTtFQUNFLGNBQUE7RUFDQSxlQUFBO0VBQ0EsYUFBQTtFQUNBLGNBQUE7RUFDQSx5QkFBQTtBQUFKOztBQUVFO0VBQ0UsYUFBQTtFQUNBLG1CQUFBO0VBQ0EsV0FBQTtFQUNBLFlBQUE7RUFDQSxlQUFBO0VBQ0EseUJBQUE7RUFDQSxzQkFBQTtBQUFKOztBQUVJO0VBQ0UsV0FBQTtBQUFOOztBQUVJO0VBQ0UsT0FBQTtFQUNBLGFBQUE7RUFDQSxlQUFBO0FBQU47O0FBRUk7RUFDRSxPQUFBO0FBQU47O0FBQ007RUFDRSxjQUFBO0VBQ0EsZUFBQTtFQUNBLGNBQUE7QUFDUjs7QUFDTTtFQUNFLGNBQUE7QUFDUiIsImZpbGUiOiJwcm9qZWN0cy9kZXYvc3JjL2FwcC9wYWdlcy9kZW1vL3JlYWQtc3RyZWFtL3JlYWQtc3RyZWFtLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLnBhcnRpdGlvbiB7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBtYXJnaW46IDMwcHggMDtcbiAgcGFkZGluZzogMDtcbiAgaGVpZ2h0OiAxcHg7XG4gIGJvcmRlcjogbm9uZTtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2VlZWVlZTtcbn1cblxuLnByaW50LXN0YWNrIHtcbiAgLnN0YWNrLW9wdCB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIC5zcGFjZXIge1xuICAgICAgZmxleDogMTtcbiAgICB9XG4gIH1cbiAgLnN0YWNrLWNvdW50IHtcbiAgICBwYWRkaW5nOiA1cHggMDtcbiAgICB0ZXh0LWFsaWduOiByaWdodDtcbiAgICBmb250LXNpemU6IDE0cHg7XG4gIH1cbiAgLnN0YWNrLWxpc3Qge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIG1hcmdpbi10b3A6IDVweDtcbiAgICBoZWlnaHQ6IDQwMHB4O1xuICAgIG92ZXJmbG93OiBhdXRvO1xuICAgIGJvcmRlcjogMXB4IHNvbGlkICM5OTk5OTk7XG4gIH1cbiAgLnN0YWNrLWl0ZW0ge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBtYXJnaW46IDNweDtcbiAgICBwYWRkaW5nOiA1cHg7XG4gICAgZm9udC1zaXplOiAxNHB4O1xuICAgIGJvcmRlcjogMXB4IHNvbGlkICNjY2NjY2M7XG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcblxuICAgIC5hc2lkZSB7XG4gICAgICB3aWR0aDogOTBweDtcbiAgICB9XG4gICAgLmJzaWRlIHtcbiAgICAgIGZsZXg6IDE7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgZmxleC13cmFwOiB3cmFwO1xuICAgIH1cbiAgICAubGFiZWwge1xuICAgICAgZmxleDogMTtcbiAgICAgIC5kdCB7XG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICBmb250LXNpemU6IDEycHg7XG4gICAgICAgIGNvbG9yOiAjODg4ODg4O1xuICAgICAgfVxuICAgICAgLmRkIHtcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iXX0= */\";","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport { FileReadStream, FileReadEventType, FileReadEvent } from 'projects/packages/src/public-api';\n\n@Component({\n  selector: 'demo-read-stream',\n  templateUrl: './read-stream.component.html',\n  styleUrls: ['./read-stream.component.scss'],\n})\nexport class ReadStreamComponent implements OnInit {\n  constructor() {}\n\n  reader: FileReadStream;\n  testChunkSize = 1024;\n  optionChunkList = [];\n  changeStack: FileReadEvent[] = [];\n  changeStackCount: number = 0;\n  changeStackDisplayMax: number = 50;\n\n  ngOnInit() {\n    this.optionChunkList = Array.from(Array(8)).map((a, b) => {\n      const index = b + 1;\n      const byte = Math.pow(index * index * 32, 2);\n      const kb = byte / 1024;\n      const mb = kb / 1024;\n      const label = mb < 1 ? `${kb}kb` : `${mb.toFixed(2)}mb`;\n      return {\n        value: byte,\n        label,\n      };\n    });\n    this.testChunkSize = this.optionChunkList[3].value;\n  }\n\n  onFileChange(evt) {\n    const { files = [] } = (evt && evt.target) || {};\n    const file = files[0];\n    if (!file) return;\n    this.readStart(file);\n    evt.target.value = null;\n  }\n\n  onFileAbort() {\n    if (this.reader) {\n      this.reader.abort();\n      this.reader.destroy();\n      this.reader = null;\n    }\n  }\n\n  readStart(file: File) {\n    this.changeStack = [];\n    this.changeStackCount = 0;\n    if (this.reader) {\n      this.reader.destroy();\n      this.reader = null;\n    }\n    this.reader = new FileReadStream(file, {\n      chunkSize: this.testChunkSize,\n    });\n    this.reader.observeState().subscribe((evt) => {\n      const { type, state } = evt;\n      this.changeStackCount++;\n      this.changeStack.push({ type, state });\n      if (this.changeStackDisplayMax < this.changeStack.length) {\n        this.changeStack.shift();\n      }\n      switch (type) {\n        case FileReadEventType.RESOLVE:\n        case FileReadEventType.REJECT:\n          this.reader.destroy();\n          this.reader = null;\n          break;\n      }\n    });\n    this.reader.start().catch((err) => console.log(err));\n  }\n}\n"],"sourceRoot":"webpack:///"}