{"version":3,"sources":["webpack:///src/app/pages/demo/blob-image/blob-image.component.html","webpack:///src/app/pages/demo/read-stream/read-stream.component.html","webpack:///packages/src/blob-image/BlobImageResize.ts","webpack:///packages/src/blob-image/index.ts","webpack:///packages/src/blob-image/types.ts","webpack:///packages/src/public-api.ts","webpack:///packages/src/read-stream/FileReadStream.ts","webpack:///packages/src/read-stream/index.ts","webpack:///packages/src/read-stream/types.ts","webpack:///src/app/modules/example/common/common.module.ts","webpack:///src/app/pages/demo/blob-image/blob-image.component.scss","webpack:///src/app/pages/demo/blob-image/blob-image.component.ts","webpack:///src/app/pages/demo/demo.module.ts","webpack:///src/app/pages/demo/demo.routing.ts","webpack:///src/app/pages/demo/read-stream/read-stream.component.scss","webpack:///src/app/pages/demo/read-stream/read-stream.component.ts"],"names":["BlobImageResize","blob","config","expectWidth","expectHeight","quality","resizeType","SCALE","expectContentType","fillBgColor","maxWidth","maxHeight","forceContentType","sw","sh","SCALE_STRETCH","getMax","dx","dy","dw","dh","isLandscape","Math","min","floor","mw","mh","contentRatio","expectRatio","URL","revokeObjectURL","blobURL","imageWidth","domImage","naturalWidth","imageHeight","naturalHeight","drawBound","COVER","getResizeToCover","COVER_STRETCH","getResizeToCoverStretch","getResizeToScaleStretch","getResizeToScale","getResizeToFixed","contentType","type","domCanvas","width","height","domCanvasContext","fillStyle","fillRect","drawImage","toBlob","onResized","bind","promiseReject","getState","error","Error","resizeBlob","promiseResolve","document","createElement","getContext","Image","onload","onImageLoaded","onerror","onImageError","promise","Promise","resolve","reject","createObjectURL","src","err","ResizeType","FileReadStream","file","readStarted","readOffset","readOffsetNext","readCurrent","readStateAbort","buffers","readFile","reader","FileReader","onReaderLoaded","onReaderError","subjectState","chunkSize","responseType","BLOB","readChunkSize","evt","push","result","stateChanged","next","resultReject","maxSize","size","resultResolve","expectNext","sliceBlob","slice","readAsArrayBuffer","CHANGE","state","RESOLVE","readPromiseResolve","reason","REJECT","readPromiseReject","readPromise","asObservable","name","lastModified","Date","now","fileName","fileType","fileSize","fileLastModified","total","readed","Blob","BUFFER","abort","ABORT","FileReadEventType","FileReadResponseType","ExampleCommonModule","imports","BlobImageComponent","testWidth","testHeight","testQuality","testContentType","testFillBgColor","optionWidths","Array","from","map","a","b","index","value","label","toString","optionHeights","optionQualities","parseFloat","toFixed","demoList","title","info","FIXED","target","files","resizeStart","infos","originalBlob","len","length","refCanvasList","demoCanvasRefs","toArray","i","demo","nativeElement","drawResizeDemo","canvas","undefined","resizeWidth","resizeHeight","resizer","create","resizeResult","drawToCanvas","resizeCanvas","draw","context","image","console","selector","template","PageModule","declarations","routes","path","children","component","RoutingModule","forChild","exports","ReadStreamComponent","optionChunks","optionResponseTypes","testChunk","testResponseType","changeStack","changeStackCount","changeStackDisplayMax","byte","pow","kb","mb","readStart","destroy","observeState","subscribe","shift","log","start"],"mappings":"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","file":"dev-app-pages-demo-demo-module-es5.js","sourcesContent":["export default \"<div>\\n  <mat-form-field>\\n    <mat-label>expectWidth</mat-label>\\n    <mat-select [(ngModel)]=\\\"testWidth\\\">\\n      <mat-option *ngFor=\\\"let data of optionWidths\\\" [value]=\\\"data.value\\\">{{\\n        data.label\\n      }}</mat-option>\\n    </mat-select>\\n  </mat-form-field>\\n  <mat-form-field>\\n    <mat-label>expectHeight</mat-label>\\n    <mat-select [(ngModel)]=\\\"testHeight\\\">\\n      <mat-option *ngFor=\\\"let data of optionHeights\\\" [value]=\\\"data.value\\\">{{\\n        data.label\\n      }}</mat-option>\\n    </mat-select>\\n  </mat-form-field>\\n  <mat-form-field>\\n    <mat-label>quality</mat-label>\\n    <mat-select [(ngModel)]=\\\"testQuality\\\">\\n      <mat-option *ngFor=\\\"let data of optionQualities\\\" [value]=\\\"data.value\\\">{{\\n        data.label\\n      }}</mat-option>\\n    </mat-select>\\n  </mat-form-field>\\n\\n  <div class=\\\"my-desc\\\">\\n    (quality: allow only contentType image/jpeg)\\n  </div>\\n  <mat-form-field>\\n    <mat-label>expectContentType</mat-label>\\n    <input matInput [(ngModel)]=\\\"testContentType\\\" />\\n    <mat-hint>ex) image/jpeg</mat-hint>\\n  </mat-form-field>\\n  <mat-form-field>\\n    <mat-label>fillBgColor</mat-label>\\n    <input matInput [(ngModel)]=\\\"testFillBgColor\\\" />\\n    <mat-hint>ex) #ff0000</mat-hint>\\n  </mat-form-field>\\n</div>\\n\\n<div class=\\\"file-wrap\\\">\\n  <input type=\\\"file\\\" accept=\\\"image/*\\\" (change)=\\\"onFileChange($event)\\\" />\\n</div>\\n\\n<div class=\\\"demo-wrap\\\">\\n  <div *ngFor=\\\"let demo of demoList\\\" class=\\\"demo-item\\\">\\n    <div class=\\\"panel-canvas\\\">\\n      <div class=\\\"draw-area\\\">\\n        <canvas #demoCanvasRefs></canvas>\\n      </div>\\n    </div>\\n    <div *ngIf=\\\"demo.info\\\" class=\\\"panel-info\\\">\\n      <em class=\\\"tit\\\">{{ demo.info.title }}</em>\\n      <dl class=\\\"dl\\\">\\n        <dt class=\\\"dt\\\">size</dt>\\n        <dd class=\\\"dd\\\">{{ demo.info.size }}bype / {{ (demo.info.size / 1024).toFixed(2) }}kb</dd>\\n      </dl>\\n      <dl class=\\\"dl\\\">\\n        <dt class=\\\"dt\\\">type</dt>\\n        <dd class=\\\"dd\\\">{{ demo.info.type }}</dd>\\n      </dl>\\n      <dl class=\\\"dl\\\">\\n        <dt class=\\\"dt\\\">width</dt>\\n        <dd class=\\\"dd\\\">{{ demo.info.width }}</dd>\\n      </dl>\\n      <dl class=\\\"dl\\\">\\n        <dt class=\\\"dt\\\">height</dt>\\n        <dd class=\\\"dd\\\">{{ demo.info.height }}</dd>\\n      </dl>\\n    </div>\\n  </div>\\n</div>\\n\\n<!-- <div class=\\\"canvas-wrap\\\">\\n  <div class=\\\"canvas-item\\\">\\n    <div class=\\\"display-area\\\">\\n      <div class=\\\"draw-area\\\">\\n        <canvas #canvasOriginal></canvas>\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\\\"canvas-item\\\">\\n    <div class=\\\"display-area\\\">\\n      <div class=\\\"draw-area\\\">\\n        <canvas #canvasCover></canvas>\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\\\"canvas-item\\\">\\n    <div class=\\\"display-area\\\">\\n      <div class=\\\"draw-area\\\">\\n        <canvas #canvasCoverNoneStretch></canvas>\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\\\"canvas-item\\\">\\n    <div class=\\\"display-area\\\">\\n      <div class=\\\"draw-area\\\">\\n        <canvas #canvasScale></canvas>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\\n<div class=\\\"info-wrap\\\">\\n  <div *ngFor=\\\"let info of infos\\\" class=\\\"info-item\\\">\\n    <em class=\\\"tit\\\">{{ info.title }}</em>\\n    <dl class=\\\"dl\\\">\\n      <dt class=\\\"dt\\\">size</dt>\\n      <dd class=\\\"dd\\\">{{ info.size }}bype / {{ (info.size / 1024).toFixed(2) }}kb</dd>\\n    </dl>\\n    <dl class=\\\"dl\\\">\\n      <dt class=\\\"dt\\\">type</dt>\\n      <dd class=\\\"dd\\\">{{ info.type }}</dd>\\n    </dl>\\n    <dl class=\\\"dl\\\">\\n      <dt class=\\\"dt\\\">width</dt>\\n      <dd class=\\\"dd\\\">{{ info.width }}</dd>\\n    </dl>\\n    <dl class=\\\"dl\\\">\\n      <dt class=\\\"dt\\\">height</dt>\\n      <dd class=\\\"dd\\\">{{ info.height }}</dd>\\n    </dl>\\n  </div>\\n</div> -->\\n\";","export default \"<div>\\n  <mat-form-field>\\n    <mat-label>chunk size</mat-label>\\n    <mat-select [(ngModel)]=\\\"testChunk\\\">\\n      <mat-option *ngFor=\\\"let chunk of optionChunks\\\" [value]=\\\"chunk.value\\\">{{\\n        chunk.label\\n      }}</mat-option>\\n    </mat-select>\\n  </mat-form-field>\\n  <mat-form-field>\\n    <mat-label>response type</mat-label>\\n    <mat-select [(ngModel)]=\\\"testResponseType\\\">\\n      <mat-option *ngFor=\\\"let chunk of optionResponseTypes\\\" [value]=\\\"chunk.value\\\">{{\\n        chunk.label\\n      }}</mat-option>\\n    </mat-select>\\n  </mat-form-field>\\n</div>\\n\\n<div>\\n  <input type=\\\"file\\\" (change)=\\\"onFileChange($event)\\\" />\\n</div>\\n\\n<hr class=\\\"partition\\\" />\\n\\n<div class=\\\"print-stack\\\">\\n  <div class=\\\"stack-opt\\\">\\n    <button mat-raised-button color=\\\"warn\\\" [disabled]=\\\"!reader\\\" (click)=\\\"onFileAbort($event)\\\">\\n      abort\\n    </button>\\n    <div class=\\\"spacer\\\"></div>\\n    <div class=\\\"stack-count\\\">read count: {{ changeStackCount }}</div>\\n  </div>\\n  <div class=\\\"stack-list\\\">\\n    <div *ngFor=\\\"let fileEvent of changeStack\\\" class=\\\"stack-item\\\">\\n      <div class=\\\"aside\\\">\\n        {{ fileEvent.type }}\\n      </div>\\n      <div *ngIf=\\\"fileEvent.state\\\" class=\\\"bside\\\">\\n        <span class=\\\"label\\\">\\n          <span class=\\\"dt\\\">readed</span>\\n          <span class=\\\"dd\\\">{{ fileEvent.state.readed }}</span>\\n        </span>\\n        <span class=\\\"label\\\">\\n          <span class=\\\"dt\\\">total</span>\\n          <span class=\\\"dd\\\">{{ fileEvent.state.total }}</span>\\n        </span>\\n        <span class=\\\"label\\\">\\n          <span class=\\\"dt\\\">percent</span>\\n          <span class=\\\"dd\\\">{{ (fileEvent.state.readed / fileEvent.state.total).toFixed(2) }}</span>\\n        </span>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\";","/* eslint-disable */\nimport { ResizeType, ResizeConfig, ResizeResult, DrawBound } from './types';\n\n/**\n * Blob 이미지 리사이즈 용\n * Blob -> Canvas&Image resize -> Blob.\n * @class BlobImageResize\n */\nexport class BlobImageResize {\n  /**\n   * @param {Blob} blob 변경할 원본 Blob\n   * @param {ResizeConfig} [config={}] 리사이징 옵션\n   */\n  constructor(blob: Blob, config: ResizeConfig = {}) {\n    this.blob = blob;\n    const {\n      expectWidth = 2000,\n      expectHeight = 2000,\n      quality = 0.9,\n      resizeType = ResizeType.SCALE,\n      expectContentType,\n      fillBgColor,\n    } = config;\n    this.quality = quality;\n    this.maxWidth = expectWidth;\n    this.maxHeight = expectHeight;\n    this.resizeType = resizeType;\n    this.forceContentType = expectContentType;\n    this.fillBgColor = fillBgColor;\n  }\n\n  // 리사이징 대상 Blob\n  protected blob: Blob;\n  // 리사이징 대상 Blob 의 URL\n  protected blobURL: string;\n  // 리사이징 대상 Blob 을 로드할 이미지\n  protected domImage: HTMLImageElement;\n  // 리사이징 대상 이미지를 그려낼 캔버스\n  protected domCanvas: HTMLCanvasElement;\n  protected domCanvasContext: CanvasRenderingContext2D;\n  // 캔버스에서 만들어낼 이미지 퀄리티\n  protected quality: number;\n  // contentType 강제 지정\n  protected forceContentType: string;\n  // 리사이징 최대 사이즈\n  protected maxWidth: number;\n  protected maxHeight: number;\n  // 캔버스 배경 컬러\n  protected fillBgColor: string;\n  // 리사이징 할 때 캔버스에 그려낼 사이즈 타입\n  protected resizeType: ResizeType;\n  // 리사이징 완료된 Blob\n  protected resizeBlob: Blob;\n  // 응답용 promize\n  protected promise: Promise<ResizeResult>;\n  protected promiseResolve: (value: ResizeResult) => void;\n  protected promiseReject: (reason?: any) => void;\n\n  protected getMax(sw: number, sh: number) {\n    let maxWidth = this.maxWidth;\n    let maxHeight = this.maxHeight;\n    if (this.maxWidth <= 0 && this.maxHeight <= 0) {\n      maxWidth = sw;\n      maxHeight = sh;\n    } else if (this.maxWidth <= 0) {\n      if (this.resizeType === ResizeType.SCALE_STRETCH) {\n        maxWidth = sw <= sh ? sw * (this.maxHeight / sh) : this.maxHeight;\n      } else {\n        maxWidth = sw * (this.maxHeight / sh);\n      }\n    } else if (this.maxHeight <= 0) {\n      if (this.resizeType === ResizeType.SCALE_STRETCH) {\n        maxHeight = sh <= sw ? sh * (this.maxWidth / sw) : this.maxWidth;\n      } else {\n        maxHeight = sh * (this.maxWidth / sw);\n      }\n    }\n    return {\n      maxWidth: maxWidth,\n      maxHeight: maxHeight,\n    };\n  }\n  /**\n   * 리사이징 타입 - SCALE 형\n   * 정해진 expect 사이즈를 최대 사이즈로 비율에 맞춤. 원본이 작은 경우 늘리지 않음.\n   * @param {number} sw\n   * @param {number} sh\n   * @returns {DrawBound}\n   */\n  getResizeToScale(sw: number, sh: number): DrawBound {\n    const { maxWidth, maxHeight } = this.getMax(sw, sh);\n    const dx: number = 0;\n    const dy: number = 0;\n    let dw: number = 0;\n    let dh: number = 0;\n    const isLandscape: boolean = sh <= sw;\n    if (isLandscape) {\n      dw = Math.min(maxWidth, sw);\n      dh = Math.floor((dw / sw) * sh);\n    } else {\n      dh = Math.min(maxHeight, sh);\n      dw = Math.floor((dh / sh) * sw);\n    }\n    return { dx, dy, dw, dh, mw: dw, mh: dh };\n  }\n\n  /**\n   * 리사이징 타입 - SCALE 형\n   * 정해진 expect 사이즈를 최대 사이즈로 비율에 맞춤. 원본이 작은 경우 비율에 맞춰서 늘림.\n   * @param {number} sw\n   * @param {number} sh\n   * @returns {DrawBound}\n   */\n  getResizeToScaleStretch(sw: number, sh: number): DrawBound {\n    const { maxWidth, maxHeight } = this.getMax(sw, sh);\n    const dx: number = 0;\n    const dy: number = 0;\n    let dw: number = 0;\n    let dh: number = 0;\n    let contentRatio: number = 1;\n    const isLandscape: boolean = sh <= sw;\n    if (isLandscape) {\n      contentRatio = sw / sh;\n      contentRatio = 1 < contentRatio ? contentRatio : 1;\n      dw = maxWidth * contentRatio;\n      dh = Math.floor((dw / sw) * sh);\n    } else {\n      contentRatio = sh / sw;\n      contentRatio = 1 < contentRatio ? contentRatio : 1;\n      dh = maxHeight * contentRatio;\n      dw = Math.floor((dh / sh) * sw);\n    }\n    return { dx, dy, dw, dh, mw: dw, mh: dh };\n  }\n\n  /**\n   * 리사이징 타입 - COVER 형\n   * 정해진 expect 사이즈에 빈 여백 없이 맞춤. 원본이 작은 경우 늘리지 않으며, cover 처리가 가능한 최대 사이즈로 맞춤.\n   * @param {number} sw\n   * @param {number} sh\n   * @returns {DrawBound}\n   */\n  getResizeToCover(sw: number, sh: number): DrawBound {\n    const { maxWidth, maxHeight } = this.getMax(sw, sh);\n    const min = Math.min(sw, sh, maxWidth, maxHeight);\n    const mw = Math.min(min, sw, maxWidth);\n    const mh = Math.min(min, sh, maxHeight);\n    let dx: number = 0;\n    let dy: number = 0;\n    let dw: number = 0;\n    let dh: number = 0;\n    let expectRatio: number = mw / mh;\n    let contentRatio: number = sw / sh;\n    if (expectRatio < contentRatio) {\n      dh = mh;\n      dw = mh * contentRatio;\n    } else {\n      dw = mw;\n      dh = mw / contentRatio;\n    }\n    dx = (mw - dw) * 0.5;\n    dy = (mh - dh) * 0.5;\n    return { dx, dy, dw, dh, mw, mh };\n  }\n\n  /**\n   * 리사이징 타입 - COVER 형\n   * 정해진 expect 사이즈에 빈 여백 없이 맞춤. 원본이 작은 경우 늘림.\n   * @param {number} sw\n   * @param {number} sh\n   * @returns {DrawBound}\n   */\n  getResizeToCoverStretch(sw: number, sh: number): DrawBound {\n    const { maxWidth, maxHeight } = this.getMax(sw, sh);\n    let dx: number = 0;\n    let dy: number = 0;\n    let dw: number = 0;\n    let dh: number = 0;\n    let expectRatio: number = maxWidth / maxHeight;\n    let contentRatio: number = sw / sh;\n    if (expectRatio < contentRatio) {\n      dh = maxHeight;\n      dw = maxHeight * contentRatio;\n    } else {\n      dw = maxWidth;\n      dh = maxWidth / contentRatio;\n    }\n    dx = (maxWidth - dw) * 0.5;\n    dy = (maxHeight - dh) * 0.5;\n    return { dx, dy, dw, dh, mw: maxWidth, mh: maxHeight };\n  }\n\n  /**\n   * 리사이징 타입 - Fixed 형\n   * 정해진 expect 사이즈에 맞춤.\n   * @param {number} sw\n   * @param {number} sh\n   * @returns {DrawBound}\n   */\n  getResizeToFixed(sw: number, sh: number) {\n    const { maxWidth, maxHeight } = this.getMax(sw, sh);\n    let dw: number = maxWidth;\n    let dh: number = maxHeight;\n    return {\n      dx: 0,\n      dy: 0,\n      dw: dw,\n      dh: dh,\n      mw: dw,\n      mh: dh,\n    };\n  }\n\n  /**\n   * 이미지 로드 완료\n   * @protected\n   */\n  protected onImageLoaded() {\n    URL.revokeObjectURL(this.blobURL);\n    const imageWidth = this.domImage.naturalWidth;\n    const imageHeight = this.domImage.naturalHeight;\n    let drawBound: DrawBound;\n    if (this.resizeType === ResizeType.COVER) {\n      drawBound = this.getResizeToCover(imageWidth, imageHeight);\n    } else if (this.resizeType === ResizeType.COVER_STRETCH) {\n      drawBound = this.getResizeToCoverStretch(imageWidth, imageHeight);\n    } else if (this.resizeType === ResizeType.SCALE_STRETCH) {\n      drawBound = this.getResizeToScaleStretch(imageWidth, imageHeight);\n    } else if (this.resizeType === ResizeType.SCALE) {\n      drawBound = this.getResizeToScale(imageWidth, imageHeight);\n    } else {\n      drawBound = this.getResizeToFixed(imageWidth, imageHeight);\n    }\n    const { dx, dy, dw, dh, mw, mh } = drawBound;\n    const contentType = this.forceContentType || this.blob.type;\n    this.domCanvas.width = mw;\n    this.domCanvas.height = mh;\n    if (this.fillBgColor) {\n      this.domCanvasContext.fillStyle = this.fillBgColor;\n      this.domCanvasContext.fillRect(0, 0, mw, mh);\n    }\n    this.domCanvasContext.drawImage(this.domImage, 0, 0, imageWidth, imageHeight, dx, dy, dw, dh);\n    this.domCanvas.toBlob(this.onResized.bind(this), contentType, this.quality); // type 이 jpeg 인 경우만 quality 적용이 됨\n  }\n\n  /**\n   * 이미지 로드 오류\n   * @protected\n   */\n  protected onImageError() {\n    URL.revokeObjectURL(this.blobURL);\n    this.promiseReject({\n      ...this.getState(),\n      error: new Error('image load error'),\n    });\n  }\n\n  /**\n   * 이미지 리사이징 완료\n   * @protected\n   * @param {Blob} resizeBlob\n   */\n  protected onResized(resizeBlob: Blob) {\n    this.resizeBlob = resizeBlob;\n    this.promiseResolve(this.getState());\n  }\n\n  /**\n   * 리사이징 이미지 생성하기\n   * @returns {Promise<ResizeResult>}\n   */\n  create(): Promise<ResizeResult> {\n    this.domCanvas = document.createElement('canvas');\n    this.domCanvasContext = this.domCanvas.getContext('2d');\n    this.domImage = new Image();\n    this.domImage.onload = this.onImageLoaded.bind(this);\n    this.domImage.onerror = this.onImageError.bind(this);\n    this.promise = new Promise((resolve, reject) => {\n      this.promiseResolve = resolve;\n      this.promiseReject = reject;\n      try {\n        this.blobURL = URL.createObjectURL(this.blob);\n        this.domImage.src = this.blobURL;\n      } catch (err) {\n        this.promiseReject({\n          ...this.getState(),\n          error: err,\n        });\n      }\n    });\n    return this.promise;\n  }\n\n  getState(): ResizeResult {\n    const blob = this.resizeBlob || null;\n    const { width = 0, height = 0 } = this.domCanvas || {};\n    return {\n      blob: blob,\n      width: blob ? width : 0,\n      height: blob ? height : 0,\n    };\n  }\n}\n","export * from './types';\nexport * from './BlobImageResize';\n","/**\n * 리사이즈 타입\n *  - SCALE: 이미지 비율 유지, 원본이 예상 크기 보다 작은 경우 늘리지 않음.\n *  - SCALE_STRETCH: 이미지 비율 유지, 원본이 예상 크기 보다 작은 경우 작은것을 기준으로 늘림.\n *  - COVER: 이미지 넘치면 잘라냄, 원본이 예상 크기 보다 작은 경우 늘리지 않음.\n *  - COVER_STRETCH: 이미지 넘치면 잘라냄, 원본이 예상 크기 보다 작은 경우 늘림.\n * @export\n * @enum {number}\n */\nexport enum ResizeType {\n  SCALE,\n  SCALE_STRETCH,\n  COVER,\n  COVER_STRETCH,\n  FIXED,\n}\n\n/**\n * 리사이즈 옵션\n * @export\n * @interface ResizeConfig\n */\nexport interface ResizeConfig {\n  /**\n   * 리사이즈 예상 width\n   * @type {number}\n   */\n  expectWidth?: number;\n  /**\n   * 리사이즈 예상 height\n   * @type {number}\n   */\n  expectHeight?: number;\n  /**\n   * 이미지 품질 (jpeg type 이 아닌건 quality 적용이 되지 않음)\n   * @type {number}\n   */\n  quality?: number;\n  /**\n   * canvas 에 그려질 contentType 을 강제하려는 경우의 값, 지정하지 않으면 읽어낸 값으로 지정\n   * @type {string}\n   */\n  expectContentType?: string;\n  /**\n   * canvas 의 기본 배경 컬러 지정\n   * @type {string}\n   */\n  fillBgColor?: string;\n  /**\n   * 리사이즈 타입\n   * @type {ResizeType}\n   */\n  resizeType?: ResizeType;\n}\n\n/**\n * 리사이즈 결과\n * @export\n * @interface ResizeResult\n */\nexport interface ResizeResult {\n  /**\n   * 리사이즈 된 Blob\n   * @type {Blob}\n   */\n  blob: Blob;\n  /**\n   * 리사이즈 된 width 사이즈\n   * @type {number}\n   */\n  width: number;\n  /**\n   * 리사이즈 된 height 사이즈\n   * @type {number}\n   */\n  height: number;\n  /**\n   * 오류가 있는 경우\n   * @type {*}\n   * @memberof ResizeResult\n   */\n  error?: any;\n}\n\n/**\n * 리사이즈 계산 정보\n * @interface DrawBound\n */\nexport interface DrawBound {\n  dx: number;\n  dy: number;\n  dw: number;\n  dh: number;\n  mw: number;\n  mh: number;\n}\n","export * from \"./read-stream\";\nexport * from \"./blob-image\";\n","/* eslint-disable */\nimport { Subject, Observable } from 'rxjs';\nimport {\n  FileReadEventType,\n  FileReadEvent,\n  FileReadState,\n  FileReadConfig,\n  FileReadResponseType,\n} from './types';\n\n/**\n * 파일 스트림 읽기.\n * FileReader 사용시 한번에 못 읽는 용량 끊어서 읽기 용.\n * @class FileReadStream\n */\nexport class FileReadStream {\n  /**\n   * @param {File} file FileReader 로 읽을 파일\n   * @param {FileReadConfig} [config={}] 스트림 옵션\n   */\n  constructor(file: File, config: FileReadConfig = {}) {\n    this.readFile = file;\n    this.reader = new FileReader();\n    this.reader.onload = this.onReaderLoaded.bind(this);\n    this.reader.onerror = this.onReaderError.bind(this);\n    this.subjectState = new Subject();\n    const { chunkSize = 1024 * 1024 * 10, responseType = FileReadResponseType.BLOB } = config;\n    this.readChunkSize = chunkSize;\n    this.responseType = responseType;\n  }\n\n  // 변경사항 알리미 @see https://rxjs-dev.firebaseapp.com\n  protected subjectState: Subject<FileReadEvent>;\n  // 파일 리더\n  protected reader: FileReader;\n  // 읽을 파일\n  protected readFile: File;\n  // 읽기 시작 여부\n  protected readStarted: boolean = false;\n  // 1회 읽을량\n  protected readChunkSize: number;\n  // 현재 읽기 offset\n  protected readOffset: number = 0;\n  // 현재 읽어야할 offset\n  protected readOffsetNext: number = 0;\n  // 현재 읽은량\n  protected readCurrent: number = 0;\n  // 현재 취소 상태인지 확인용\n  protected readStateAbort: boolean = false;\n  // 읽은 버퍼\n  protected buffers: ArrayBuffer[] = [];\n  // 응답시 파일 타입\n  protected responseType: FileReadResponseType;\n  // subjectState 로 진행(완료) 상태를 받을 수 있지만, 편의용 async/await 도 제공\n  protected readPromise: Promise<FileReadEvent>;\n  protected readPromiseResolve: (value: FileReadEvent) => void;\n  protected readPromiseReject: (reason?: any) => void;\n\n  /**\n   * 파일 읽기 1회 완료\n   * @protected\n   * @param {Event} evt\n   */\n  protected onReaderLoaded(evt: Event) {\n    this.readCurrent = this.readOffsetNext;\n    this.readOffset += this.readChunkSize;\n    this.buffers.push(this.reader.result as ArrayBuffer);\n    this.stateChanged();\n    this.next();\n  }\n\n  /**\n   * 파일 읽기 1회 오류\n   * @protected\n   * @param {Event} evt\n   */\n  protected onReaderError(evt: Event) {\n    this.resultReject(new Error('file reader onerror event'));\n  }\n\n  /**\n   * 다음 구간 읽기\n   * @protected\n   */\n  protected next() {\n    if (this.readStateAbort) {\n      return;\n    }\n    try {\n      const maxSize = this.readFile.size;\n      if (maxSize <= this.readOffset) {\n        this.resultResolve();\n        return;\n      }\n      let expectNext = this.readOffset + this.readChunkSize;\n      if (maxSize <= expectNext) expectNext = maxSize;\n      this.readOffsetNext = expectNext;\n      const sliceBlob = this.readFile.slice(this.readOffset, this.readOffsetNext);\n      this.reader.readAsArrayBuffer(sliceBlob);\n    } catch (err) {\n      this.onReaderError(err);\n    }\n  }\n\n  /**\n   * state 변경 시 알림\n   * @protected\n   */\n  protected stateChanged() {\n    this.subjectState.next({\n      type: FileReadEventType.CHANGE,\n      state: this.getState(),\n    });\n  }\n\n  /**\n   * 완료 시 알림\n   * @protected\n   */\n  protected resultResolve() {\n    const result: FileReadEvent = {\n      type: FileReadEventType.RESOLVE,\n      state: this.getState(),\n    };\n    this.reader.onload = null;\n    this.reader.onerror = null;\n    this.readPromiseResolve(result);\n    this.subjectState.next(result);\n  }\n\n  /**\n   * 실패 시 알림\n   * @protected\n   * @param {*} reason\n   */\n  protected resultReject(reason: any, type: FileReadEventType = FileReadEventType.REJECT) {\n    const result: FileReadEvent = {\n      type,\n      state: null,\n      error: reason,\n    };\n    this.reader.onload = null;\n    this.reader.onerror = null;\n    this.readPromiseReject(result);\n    this.subjectState.next(result);\n  }\n\n  /**\n   * 읽기 시작\n   * @returns {Promise<FileReadEvent>}\n   */\n  start(): Promise<FileReadEvent> {\n    if (this.readStarted) return;\n    this.readStarted = true;\n    this.readPromise = new Promise((resolve, reject) => {\n      this.readPromiseResolve = resolve;\n      this.readPromiseReject = reject;\n    });\n    this.next();\n    return this.readPromise;\n  }\n\n  /**\n   * 상태변경 옵저버\n   * @returns {Observable<FileReadEvent>}\n   */\n  observeState(): Observable<FileReadEvent> {\n    return this.subjectState.asObservable();\n  }\n\n  /**\n   * 현재 상태\n   * @returns {FileReadState}\n   */\n  getState(): FileReadState {\n    const { name = null, type = null, size = 0, lastModified = Date.now() } = this.readFile || {};\n    const state: FileReadState = {\n      fileName: name,\n      fileType: type,\n      fileSize: size,\n      fileLastModified: lastModified,\n      total: size,\n      readed: this.readCurrent,\n      responseType: this.responseType,\n      chunkSize: this.readChunkSize,\n    };\n    switch (this.responseType) {\n      case FileReadResponseType.BLOB:\n        state.blob = new Blob(this.buffers, { type });\n        break;\n      case FileReadResponseType.BUFFER:\n        state.buffers = this.buffers;\n        break;\n    }\n    return state;\n  }\n\n  /**\n   * 파일 읽기 중단\n   */\n  abort(): void {\n    this.readStateAbort = true;\n    if (this.reader) {\n      this.reader.abort();\n      this.reader.onload = null;\n      this.reader.onerror = null;\n      this.resultReject(new Error('file reader abort event'), FileReadEventType.ABORT);\n    }\n  }\n\n  /**\n   * 파기\n   */\n  destroy() {\n    if (this.reader) {\n      this.reader.abort();\n      this.reader.onload = null;\n      this.reader.onerror = null;\n      this.reader = null;\n    }\n    this.readFile = null;\n  }\n}\n","/**\n * dependencies\n * - rxjs: https://rxjs-dev.firebaseapp.com\n */\n\nexport * from './types';\nexport * from './FileReadStream';\n","/**\n * 스트림 이벤트 타입\n *  - CHANGE: 변경사항이 있음\n *  - RESOLVE: 완료\n *  - REJECT: 오류\n * @export\n * @enum {string}\n */\nexport enum FileReadEventType {\n  CHANGE = 'CHANGE',\n  RESOLVE = 'RESOLVE',\n  REJECT = 'REJECT',\n  ABORT = 'ABORT',\n}\n\n/**\n * 스트림 이벤트\n * @export\n * @interface FileReadEvent\n */\nexport interface FileReadEvent {\n  /**\n   * 이벤트 타입명\n   * @type {FileReadEventType}\n   */\n  type: FileReadEventType;\n  /**\n   * 스트림 상태\n   * @type {FileReadState}\n   */\n  state: FileReadState;\n  /**\n   * 오류\n   * @type {*}\n   */\n  error?: any;\n}\n\n/**\n * 스트림 상태 정보\n * @export\n * @interface FileReadState\n */\nexport interface FileReadState {\n  /**\n   * 파일명\n   * @type {string}\n   */\n  fileName: string;\n  /**\n   * 파일의 (Mime)타입\n   * @type {string}\n   */\n  fileType: string;\n  /**\n   * 파일의 용량\n   * @type {number}\n   */\n  fileSize: number;\n  /**\n   * 파일의 마지막 수정시간\n   * @type {number}\n   */\n  fileLastModified: number;\n  /**\n   * 읽어들인 용량\n   * @type {number}\n   */\n  readed: number;\n  /**\n   * 읽어내야할 용량(파일 용량)\n   * @type {number}\n   */\n  total: number;\n  /**\n   * 1회 읽기시 읽어들일 용량\n   * @type {number}\n   */\n  chunkSize: number;\n  /**\n   * 읽기 완료 후 반환 타입\n   * @type {FileReadResponseType}\n   */\n  responseType: FileReadResponseType;\n  /**\n   * responseType 이 BUFFER 인 경우 반환하는 ArrayBuffer[]\n   * @type {ArrayBuffer[]}\n   */\n  buffers?: ArrayBuffer[];\n  /**\n   * responseType 이 BLOB 인 경우 반환하는 Blob\n   * @type {Blob}\n   */\n  blob?: Blob;\n}\n\n/**\n * 스트림 옵션\n * @export\n * @interface FileReadConfig\n */\nexport interface FileReadConfig {\n  /**\n   * 1회에 읽어들일 용량\n   * @type {number}\n   */\n  chunkSize?: number;\n  /**\n   * 읽기 완료 후 반환 타입\n   * @type {FileReadResponseType}\n   */\n  responseType?: FileReadResponseType;\n}\n\n/**\n * 스트립 상태 정보 중 완료시 파일 타입.\n *  - BUFFER: ArrayBuffer[] 타입\n *  - BLOB: Blob 타입\n * @export\n * @enum {string}\n */\nexport enum FileReadResponseType {\n  BUFFER = 'BUFFER',\n  BLOB = 'BLOB',\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  imports: [CommonModule],\n  // exports: [SampleActorComponent],\n  // declarations: [SampleActorComponent],\n})\nexport class ExampleCommonModule {}\n","export default \".file-wrap {\\n  padding: 30px 0;\\n}\\n\\n.my-desc {\\n  padding: 10px 0;\\n  color: #999999;\\n}\\n\\n.demo-wrap {\\n  display: flex;\\n  flex-wrap: wrap;\\n}\\n\\n.demo-wrap .demo-item {\\n  padding: 10px;\\n  width: 25%;\\n  min-width: 280px;\\n  box-sizing: border-box;\\n}\\n\\n.demo-wrap .demo-item .panel-info {\\n  padding: 10px 10px;\\n  font-size: 14px;\\n  box-sizing: border-box;\\n}\\n\\n.demo-wrap .demo-item .panel-info .tit {\\n  display: block;\\n  padding-bottom: 5px;\\n  font-size: 16px;\\n  font-style: normal;\\n  font-weight: bold;\\n}\\n\\n.demo-wrap .demo-item .panel-info .dl {\\n  display: flex;\\n  padding: 5px 0;\\n  align-items: center;\\n}\\n\\n.demo-wrap .demo-item .panel-info .dl .dt {\\n  width: 50px;\\n  color: #999999;\\n}\\n\\n.demo-wrap .demo-item .panel-info .dl .dd {\\n  color: #000000;\\n}\\n\\n.demo-wrap .demo-item .panel-canvas {\\n  position: relative;\\n  padding-bottom: 100%;\\n  box-sizing: border-box;\\n}\\n\\n.demo-wrap .demo-item .panel-canvas .draw-area {\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  width: 100%;\\n  height: 100%;\\n  overflow: auto;\\n  box-sizing: border-box;\\n  border: 1px dashed #000000;\\n  background-color: #f9f9f9;\\n  background-image: linear-gradient(45deg, #d9d9d9 25%, transparent 25%, transparent 75%, #d9d9d9 75%, #d9d9d9), linear-gradient(45deg, #d9d9d9 25%, transparent 25%, transparent 75%, #d9d9d9 75%, #d9d9d9);\\n  background-size: 20px 20px;\\n  background-position: 0 0, 10px 10px;\\n}\\n\\n.demo-wrap .demo-item .panel-canvas .draw-area > canvas {\\n  display: block;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByb2plY3RzL2Rldi9zcmMvYXBwL3BhZ2VzL2RlbW8vYmxvYi1pbWFnZS9ibG9iLWltYWdlLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsZUFBQTtBQUNGOztBQUNBO0VBQ0UsZUFBQTtFQUNBLGNBQUE7QUFFRjs7QUFBQTtFQUNFLGFBQUE7RUFDQSxlQUFBO0FBR0Y7O0FBRkU7RUFDRSxhQUFBO0VBQ0EsVUFBQTtFQUNBLGdCQUFBO0VBQ0Esc0JBQUE7QUFJSjs7QUFISTtFQUNFLGtCQUFBO0VBQ0EsZUFBQTtFQUNBLHNCQUFBO0FBS047O0FBSk07RUFDRSxjQUFBO0VBQ0EsbUJBQUE7RUFDQSxlQUFBO0VBQ0Esa0JBQUE7RUFDQSxpQkFBQTtBQU1SOztBQUpNO0VBQ0UsYUFBQTtFQUNBLGNBQUE7RUFDQSxtQkFBQTtBQU1SOztBQUxRO0VBQ0UsV0FBQTtFQUNBLGNBQUE7QUFPVjs7QUFMUTtFQUNFLGNBQUE7QUFPVjs7QUFGSTtFQUNFLGtCQUFBO0VBQ0Esb0JBQUE7RUFDQSxzQkFBQTtBQUlOOztBQUhNO0VBQ0Usa0JBQUE7RUFDQSxNQUFBO0VBQ0EsT0FBQTtFQUNBLFdBQUE7RUFDQSxZQUFBO0VBQ0EsY0FBQTtFQUNBLHNCQUFBO0VBQ0EsMEJBQUE7RUFDQSx5QkFBQTtFQUNBLDBNQUFBO0VBZ0JBLDBCQUFBO0VBQ0EsbUNBQUE7QUFWUjs7QUFXUTtFQUNFLGNBQUE7QUFUViIsImZpbGUiOiJwcm9qZWN0cy9kZXYvc3JjL2FwcC9wYWdlcy9kZW1vL2Jsb2ItaW1hZ2UvYmxvYi1pbWFnZS5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5maWxlLXdyYXAge1xuICBwYWRkaW5nOiAzMHB4IDA7XG59XG4ubXktZGVzYyB7XG4gIHBhZGRpbmc6IDEwcHggMDtcbiAgY29sb3I6ICM5OTk5OTk7XG59XG4uZGVtby13cmFwIHtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC13cmFwOiB3cmFwO1xuICAuZGVtby1pdGVtIHtcbiAgICBwYWRkaW5nOiAxMHB4O1xuICAgIHdpZHRoOiAyNSU7XG4gICAgbWluLXdpZHRoOiAyODBweDtcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgIC5wYW5lbC1pbmZvIHtcbiAgICAgIHBhZGRpbmc6IDEwcHggMTBweDtcbiAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICAudGl0IHtcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgIHBhZGRpbmctYm90dG9tOiA1cHg7XG4gICAgICAgIGZvbnQtc2l6ZTogMTZweDtcbiAgICAgICAgZm9udC1zdHlsZTogbm9ybWFsO1xuICAgICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgIH1cbiAgICAgIC5kbCB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIHBhZGRpbmc6IDVweCAwO1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAuZHQge1xuICAgICAgICAgIHdpZHRoOiA1MHB4O1xuICAgICAgICAgIGNvbG9yOiAjOTk5OTk5O1xuICAgICAgICB9XG4gICAgICAgIC5kZCB7XG4gICAgICAgICAgY29sb3I6ICMwMDAwMDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAucGFuZWwtY2FudmFzIHtcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgIHBhZGRpbmctYm90dG9tOiAxMDAlO1xuICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgIC5kcmF3LWFyZWEge1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIHRvcDogMDtcbiAgICAgICAgbGVmdDogMDtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgb3ZlcmZsb3c6IGF1dG87XG4gICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgICAgIGJvcmRlcjogMXB4IGRhc2hlZCAjMDAwMDAwO1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjlmOWY5O1xuICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQoXG4gICAgICAgICAgICA0NWRlZyxcbiAgICAgICAgICAgICNkOWQ5ZDkgMjUlLFxuICAgICAgICAgICAgdHJhbnNwYXJlbnQgMjUlLFxuICAgICAgICAgICAgdHJhbnNwYXJlbnQgNzUlLFxuICAgICAgICAgICAgI2Q5ZDlkOSA3NSUsXG4gICAgICAgICAgICAjZDlkOWQ5XG4gICAgICAgICAgKSxcbiAgICAgICAgICBsaW5lYXItZ3JhZGllbnQoXG4gICAgICAgICAgICA0NWRlZyxcbiAgICAgICAgICAgICNkOWQ5ZDkgMjUlLFxuICAgICAgICAgICAgdHJhbnNwYXJlbnQgMjUlLFxuICAgICAgICAgICAgdHJhbnNwYXJlbnQgNzUlLFxuICAgICAgICAgICAgI2Q5ZDlkOSA3NSUsXG4gICAgICAgICAgICAjZDlkOWQ5XG4gICAgICAgICAgKTtcbiAgICAgICAgYmFja2dyb3VuZC1zaXplOiAyMHB4IDIwcHg7XG4gICAgICAgIGJhY2tncm91bmQtcG9zaXRpb246IDAgMCwgMTBweCAxMHB4O1xuICAgICAgICA+IGNhbnZhcyB7XG4gICAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiJdfQ== */\";","import { Component, OnInit, ElementRef, ViewChildren, QueryList } from '@angular/core';\nimport { BlobImageResize, ResizeType } from 'projects/packages/src/public-api';\n\ninterface Info {\n  title: string;\n  type: string;\n  size: number;\n  width: number;\n  height: number;\n}\n\n@Component({\n  selector: 'demo-blob-image',\n  templateUrl: './blob-image.component.html',\n  styleUrls: ['./blob-image.component.scss'],\n})\nexport class BlobImageComponent implements OnInit {\n  constructor() {}\n\n  infos: Info[];\n  optionWidths: { label: string; value: number }[];\n  optionHeights: { label: string; value: number }[];\n  optionQualities: { label: string; value: number }[];\n  testWidth: number = 600;\n  testHeight: number = 0;\n  testQuality: number = 0.9;\n  testContentType: string = '';\n  testFillBgColor: string = '';\n\n  @ViewChildren('demoCanvasRefs') demoCanvasRefs: QueryList<ElementRef<HTMLCanvasElement>>;\n  demoList: any[];\n\n  ngOnInit() {\n    this.optionWidths = Array.from(Array(10)).map((a, b) => {\n      const index = b; // + 1;\n      const size = 100 * index;\n      return { value: size, label: size.toString() };\n    });\n    this.optionHeights = Array.from(Array(10)).map((a, b) => {\n      const index = b; // + 1;\n      const size = 100 * index;\n      return { value: size, label: size.toString() };\n    });\n    this.optionQualities = Array.from(Array(10)).map((a, b) => {\n      const index = b + 1;\n      const size = parseFloat((0.1 * index).toFixed(1));\n      return { value: size, label: size.toString() };\n    });\n    this.demoList = [\n      { title: 'original', info: null, resizeType: null },\n      { title: 'resize - fixed', info: null, resizeType: ResizeType.FIXED },\n      { title: 'resize - scale', info: null, resizeType: ResizeType.SCALE },\n      { title: 'resize - scale stretch', info: null, resizeType: ResizeType.SCALE_STRETCH },\n      { title: 'resize - cover', info: null, resizeType: ResizeType.COVER },\n      { title: 'resize - cover stretch', info: null, resizeType: ResizeType.COVER_STRETCH },\n    ];\n  }\n\n  onFileChange(evt) {\n    const { files = [] } = (evt && evt.target) || {};\n    const file = files[0];\n    if (!file) return;\n    this.resizeStart(file);\n    evt.target.value = null;\n  }\n\n  async resizeStart(file: File) {\n    this.infos = [];\n    const originalBlob = new Blob([file], { type: file.type });\n    const len = this.demoList.length;\n    const refCanvasList = this.demoCanvasRefs.toArray();\n    for (let i = 0; i < len; i++) {\n      const demo = this.demoList[i];\n      const { nativeElement } = refCanvasList[i];\n      const info = await this.drawResizeDemo(nativeElement, originalBlob, demo.resizeType);\n      demo.info = {\n        ...info,\n        title: demo.title,\n      };\n    }\n  }\n\n  private async drawResizeDemo(canvas: HTMLCanvasElement, blob: Blob, resizeType: ResizeType) {\n    const expectWidth = this.testWidth;\n    const expectHeight = this.testHeight;\n    const expectContentType = this.testContentType || undefined;\n    const quality = this.testQuality;\n    const fillBgColor = this.testFillBgColor || undefined;\n    let resizeBlob: Blob = blob;\n    let resizeCanvas: HTMLCanvasElement;\n    let resizeWidth: number = 0;\n    let resizeHeight: number = 0;\n    if (ResizeType[resizeType]) {\n      const resizer = new BlobImageResize(blob, {\n        expectWidth,\n        expectHeight,\n        quality,\n        resizeType,\n        expectContentType,\n        fillBgColor,\n      });\n      const resizeResult = await resizer.create();\n      resizeBlob = resizeResult.blob;\n      resizeWidth = resizeResult.width;\n      resizeHeight = resizeResult.height;\n    } else {\n      resizeBlob = blob;\n      resizeCanvas = await this.drawToCanvas(canvas, {\n        blob: resizeBlob,\n        width: 0,\n        height: 0,\n      });\n    }\n    resizeCanvas = await this.drawToCanvas(canvas, {\n      blob: resizeBlob,\n      width: resizeWidth,\n      height: resizeHeight,\n    });\n    return Promise.resolve({\n      size: resizeBlob.size,\n      type: resizeBlob.type,\n      width: resizeCanvas.width,\n      height: resizeCanvas.height,\n    });\n  }\n\n  private async drawToCanvas(\n    canvas: HTMLCanvasElement,\n    draw: { blob: Blob; width: number; height: number }\n  ): Promise<HTMLCanvasElement> {\n    return new Promise((resolve) => {\n      const { blob, width, height } = draw;\n      const context = canvas.getContext('2d');\n      const image = new Image();\n      image.onload = () => {\n        canvas.width = width || image.naturalWidth;\n        canvas.height = height || image.naturalHeight;\n        context.drawImage(image, 0, 0);\n        URL.revokeObjectURL(image.src);\n        resolve(canvas);\n      };\n      image.onerror = () => {\n        console.error('image load error');\n        URL.revokeObjectURL(image.src);\n        resolve(canvas);\n      };\n      image.src = URL.createObjectURL(blob);\n    });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RoutingModule } from '~/dev/app/pages/demo/demo.routing';\nimport { SharedModule } from '~/dev/app/shared/shared.module';\nimport { ExampleCommonModule } from '~/dev/app/modules/example/common/common.module';\nimport { ReadStreamComponent } from './read-stream/read-stream.component';\nimport { BlobImageComponent } from './blob-image/blob-image.component';\n\n@NgModule({\n  imports: [CommonModule, RoutingModule, SharedModule, ExampleCommonModule],\n  declarations: [ReadStreamComponent, BlobImageComponent],\n})\nexport class PageModule {}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ReadStreamComponent } from './read-stream/read-stream.component';\nimport { BlobImageComponent } from './blob-image/blob-image.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    children: [\n      {\n        path: 'read-stream',\n        component: ReadStreamComponent,\n      },\n      {\n        path: 'blob-image',\n        component: BlobImageComponent,\n      },\n      {\n        path: '**',\n        component: ReadStreamComponent,\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class RoutingModule {}\n","export default \".partition {\\n  display: block;\\n  margin: 30px 0;\\n  padding: 0;\\n  height: 1px;\\n  border: none;\\n  background-color: #eeeeee;\\n}\\n\\n.print-stack .stack-opt {\\n  display: flex;\\n  align-items: center;\\n}\\n\\n.print-stack .stack-opt .spacer {\\n  flex: 1;\\n}\\n\\n.print-stack .stack-count {\\n  padding: 5px 0;\\n  text-align: right;\\n  font-size: 14px;\\n}\\n\\n.print-stack .stack-list {\\n  display: block;\\n  margin-top: 5px;\\n  height: 400px;\\n  overflow: auto;\\n  border: 1px solid #999999;\\n}\\n\\n.print-stack .stack-item {\\n  display: flex;\\n  align-items: center;\\n  margin: 3px;\\n  padding: 5px;\\n  font-size: 14px;\\n  border: 1px solid #cccccc;\\n  box-sizing: border-box;\\n}\\n\\n.print-stack .stack-item .aside {\\n  width: 90px;\\n}\\n\\n.print-stack .stack-item .bside {\\n  flex: 1;\\n  display: flex;\\n  flex-wrap: wrap;\\n}\\n\\n.print-stack .stack-item .label {\\n  flex: 1;\\n}\\n\\n.print-stack .stack-item .label .dt {\\n  display: block;\\n  font-size: 12px;\\n  color: #888888;\\n}\\n\\n.print-stack .stack-item .label .dd {\\n  display: block;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByb2plY3RzL2Rldi9zcmMvYXBwL3BhZ2VzL2RlbW8vcmVhZC1zdHJlYW0vcmVhZC1zdHJlYW0uY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxjQUFBO0VBQ0EsY0FBQTtFQUNBLFVBQUE7RUFDQSxXQUFBO0VBQ0EsWUFBQTtFQUNBLHlCQUFBO0FBQ0Y7O0FBR0U7RUFDRSxhQUFBO0VBQ0EsbUJBQUE7QUFBSjs7QUFDSTtFQUNFLE9BQUE7QUFDTjs7QUFFRTtFQUNFLGNBQUE7RUFDQSxpQkFBQTtFQUNBLGVBQUE7QUFBSjs7QUFFRTtFQUNFLGNBQUE7RUFDQSxlQUFBO0VBQ0EsYUFBQTtFQUNBLGNBQUE7RUFDQSx5QkFBQTtBQUFKOztBQUVFO0VBQ0UsYUFBQTtFQUNBLG1CQUFBO0VBQ0EsV0FBQTtFQUNBLFlBQUE7RUFDQSxlQUFBO0VBQ0EseUJBQUE7RUFDQSxzQkFBQTtBQUFKOztBQUVJO0VBQ0UsV0FBQTtBQUFOOztBQUVJO0VBQ0UsT0FBQTtFQUNBLGFBQUE7RUFDQSxlQUFBO0FBQU47O0FBRUk7RUFDRSxPQUFBO0FBQU47O0FBQ007RUFDRSxjQUFBO0VBQ0EsZUFBQTtFQUNBLGNBQUE7QUFDUjs7QUFDTTtFQUNFLGNBQUE7QUFDUiIsImZpbGUiOiJwcm9qZWN0cy9kZXYvc3JjL2FwcC9wYWdlcy9kZW1vL3JlYWQtc3RyZWFtL3JlYWQtc3RyZWFtLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLnBhcnRpdGlvbiB7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBtYXJnaW46IDMwcHggMDtcbiAgcGFkZGluZzogMDtcbiAgaGVpZ2h0OiAxcHg7XG4gIGJvcmRlcjogbm9uZTtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2VlZWVlZTtcbn1cblxuLnByaW50LXN0YWNrIHtcbiAgLnN0YWNrLW9wdCB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIC5zcGFjZXIge1xuICAgICAgZmxleDogMTtcbiAgICB9XG4gIH1cbiAgLnN0YWNrLWNvdW50IHtcbiAgICBwYWRkaW5nOiA1cHggMDtcbiAgICB0ZXh0LWFsaWduOiByaWdodDtcbiAgICBmb250LXNpemU6IDE0cHg7XG4gIH1cbiAgLnN0YWNrLWxpc3Qge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIG1hcmdpbi10b3A6IDVweDtcbiAgICBoZWlnaHQ6IDQwMHB4O1xuICAgIG92ZXJmbG93OiBhdXRvO1xuICAgIGJvcmRlcjogMXB4IHNvbGlkICM5OTk5OTk7XG4gIH1cbiAgLnN0YWNrLWl0ZW0ge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBtYXJnaW46IDNweDtcbiAgICBwYWRkaW5nOiA1cHg7XG4gICAgZm9udC1zaXplOiAxNHB4O1xuICAgIGJvcmRlcjogMXB4IHNvbGlkICNjY2NjY2M7XG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcblxuICAgIC5hc2lkZSB7XG4gICAgICB3aWR0aDogOTBweDtcbiAgICB9XG4gICAgLmJzaWRlIHtcbiAgICAgIGZsZXg6IDE7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgZmxleC13cmFwOiB3cmFwO1xuICAgIH1cbiAgICAubGFiZWwge1xuICAgICAgZmxleDogMTtcbiAgICAgIC5kdCB7XG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICBmb250LXNpemU6IDEycHg7XG4gICAgICAgIGNvbG9yOiAjODg4ODg4O1xuICAgICAgfVxuICAgICAgLmRkIHtcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iXX0= */\";","import { Component, OnInit } from '@angular/core';\nimport {\n  FileReadStream,\n  FileReadEventType,\n  FileReadEvent,\n  FileReadResponseType,\n} from 'projects/packages/src/public-api';\n\n@Component({\n  selector: 'demo-read-stream',\n  templateUrl: './read-stream.component.html',\n  styleUrls: ['./read-stream.component.scss'],\n})\nexport class ReadStreamComponent implements OnInit {\n  constructor() {}\n\n  reader: FileReadStream;\n  optionChunks = [];\n  optionResponseTypes = [];\n  testChunk = 1024;\n  testResponseType = FileReadResponseType.BLOB;\n  changeStack: FileReadEvent[] = [];\n  changeStackCount: number = 0;\n  changeStackDisplayMax: number = 50;\n\n  ngOnInit() {\n    this.optionResponseTypes = [\n      { label: 'BLOB', value: FileReadResponseType.BLOB },\n      { label: 'BUFFER', value: FileReadResponseType.BUFFER },\n    ];\n    this.optionChunks = Array.from(Array(8)).map((a, b) => {\n      const index = b + 1;\n      const byte = Math.pow(index * index * 32, 2);\n      const kb = byte / 1024;\n      const mb = kb / 1024;\n      const label = mb < 1 ? `${kb}kb` : `${mb.toFixed(2)}mb`;\n      return {\n        value: byte,\n        label,\n      };\n    });\n    this.testChunk = this.optionChunks[1].value;\n  }\n\n  onFileChange(evt) {\n    const { files = [] } = (evt && evt.target) || {};\n    const file = files[0];\n    if (!file) return;\n    this.readStart(file);\n    evt.target.value = null;\n  }\n\n  onFileAbort() {\n    if (this.reader) {\n      this.reader.abort();\n      this.reader.destroy();\n      this.reader = null;\n    }\n  }\n\n  readStart(file: File) {\n    this.changeStack = [];\n    this.changeStackCount = 0;\n    if (this.reader) {\n      this.reader.destroy();\n      this.reader = null;\n    }\n    this.reader = new FileReadStream(file, {\n      chunkSize: this.testChunk,\n      responseType: this.testResponseType,\n    });\n    this.reader.observeState().subscribe((evt) => {\n      const { type, state } = evt;\n      this.changeStackCount++;\n      this.changeStack.push({ type, state });\n      if (this.changeStackDisplayMax < this.changeStack.length) {\n        this.changeStack.shift();\n      }\n      switch (type) {\n        case FileReadEventType.RESOLVE:\n        case FileReadEventType.REJECT:\n          console.log(state);\n          this.reader.destroy();\n          this.reader = null;\n          break;\n      }\n    });\n    this.reader.start().catch((err) => console.log(err));\n  }\n}\n"]}