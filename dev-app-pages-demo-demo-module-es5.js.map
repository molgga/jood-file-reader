{"version":3,"sources":["webpack:///src/app/pages/demo/blob-image/blob-image.component.html","webpack:///src/app/pages/demo/read-stream/read-stream.component.html","webpack:///packages/src/blob-image/BlobImageResize.ts","webpack:///packages/src/blob-image/index.ts","webpack:///packages/src/blob-image/types.ts","webpack:///packages/src/public-api.ts","webpack:///packages/src/read-stream/FileReadStream.ts","webpack:///packages/src/read-stream/index.ts","webpack:///packages/src/read-stream/types.ts","webpack:///src/app/modules/example/common/common.module.ts","webpack:///src/app/pages/demo/blob-image/blob-image.component.scss","webpack:///src/app/pages/demo/blob-image/blob-image.component.ts","webpack:///src/app/pages/demo/demo.module.ts","webpack:///src/app/pages/demo/demo.routing.ts","webpack:///src/app/pages/demo/read-stream/read-stream.component.scss","webpack:///src/app/pages/demo/read-stream/read-stream.component.ts"],"names":["BlobImageResize","blob","config","expectWidth","expectHeight","quality","resizeType","SCALE","maxWidth","maxHeight","sw","sh","dx","dy","dw","dh","isLandscape","Math","min","floor","expectRatio","contentRatio","URL","revokeObjectURL","blobURL","imageWidth","domImage","naturalWidth","imageHeight","naturalHeight","drawBound","COVER","getResizeToCover","domCanvas","width","height","getResizeToScale","domCanvasContext","drawImage","toBlob","onResized","bind","promiseReject","getState","error","Error","resizeBlob","promiseResolve","document","createElement","getContext","Image","onload","onImageLoaded","onerror","onImageError","promise","Promise","resolve","reject","createObjectURL","src","err","ResizeType","FileReadStream","file","readStarted","readOffset","readOffsetNext","readCurrent","readStateAbort","buffers","readFile","reader","FileReader","onReaderLoaded","onReaderError","subjectState","chunkSize","responseType","BLOB","readChunkSize","evt","push","result","stateChanged","next","resultReject","maxSize","size","resultResolve","expectNext","sliceBlob","slice","readAsArrayBuffer","type","CHANGE","state","RESOLVE","readPromiseResolve","reason","REJECT","readPromiseReject","readPromise","asObservable","name","lastModified","Date","now","fileName","fileType","fileSize","fileLastModified","total","readed","Blob","BUFFER","abort","ABORT","FileReadEventType","FileReadResponseType","ExampleCommonModule","imports","BlobImageComponent","selector","template","PageModule","declarations","routes","path","children","component","RoutingModule","forChild","exports","ReadStreamComponent","testChunkSize","optionChunkList","changeStack","changeStackCount","changeStackDisplayMax","Array","from","map","a","b","index","byte","pow","kb","mb","label","toFixed","value","target","files","readStart","destroy","observeState","subscribe","length","shift","start","console","log"],"mappings":"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","file":"dev-app-pages-demo-demo-module-es5.js","sourcesContent":["export default \"<p>\\n  @TODO - blob-image works!\\n</p>\\n\";","export default \"<div>\\n  <mat-form-field>\\n    <mat-label>test chunk size</mat-label>\\n    <mat-select [(ngModel)]=\\\"testChunkSize\\\">\\n      <mat-option *ngFor=\\\"let chunk of optionChunkList\\\" [value]=\\\"chunk.value\\\">{{\\n        chunk.label\\n      }}</mat-option>\\n    </mat-select>\\n  </mat-form-field>\\n\\n  <br />\\n  <br />\\n  @TODO - test option: responseType = BUFFER | BLOB\\n  <br />\\n  <br />\\n  <br />\\n</div>\\n\\n<div>\\n  <input type=\\\"file\\\" (change)=\\\"onFileChange($event)\\\" />\\n</div>\\n\\n<hr class=\\\"partition\\\" />\\n\\n<div class=\\\"print-stack\\\">\\n  <div class=\\\"stack-opt\\\">\\n    <button mat-raised-button color=\\\"warn\\\" [disabled]=\\\"!reader\\\" (click)=\\\"onFileAbort($event)\\\">\\n      abort\\n    </button>\\n    <div class=\\\"spacer\\\"></div>\\n    <div class=\\\"stack-count\\\">read count: {{ changeStackCount }}</div>\\n  </div>\\n  <div class=\\\"stack-list\\\">\\n    <div *ngFor=\\\"let fileEvent of changeStack\\\" class=\\\"stack-item\\\">\\n      <div class=\\\"aside\\\">\\n        {{ fileEvent.type }}\\n      </div>\\n      <div *ngIf=\\\"fileEvent.state\\\" class=\\\"bside\\\">\\n        <span class=\\\"label\\\">\\n          <span class=\\\"dt\\\">readed</span>\\n          <span class=\\\"dd\\\">{{ fileEvent.state.readed }}</span>\\n        </span>\\n        <span class=\\\"label\\\">\\n          <span class=\\\"dt\\\">total</span>\\n          <span class=\\\"dd\\\">{{ fileEvent.state.total }}</span>\\n        </span>\\n        <span class=\\\"label\\\">\\n          <span class=\\\"dt\\\">percent</span>\\n          <span class=\\\"dd\\\">{{ (fileEvent.state.readed / fileEvent.state.total).toFixed(2) }}</span>\\n        </span>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\";","/* eslint-disable */\nimport { ResizeType, ResizeConfig, ResizeResult, DrawBound } from './types';\n\n/**\n * Blob 이미지 리사이즈 용\n * Blob -> Canvas&Image resize -> Blob.\n * @class BlobImageResize\n * @example\n  const someBlob = new Blob([file], { type: file.type });\n  const resizer = new BlobImageResize(someBlob, {\n    expectWidth: 200,\n    expectHeight: 200,\n    resizeType: ResizeType.COVER\n  });\n  const { blob } = await resizer.create();\n  const url = URL.createObjectURL(blob);\n  const revoke = () => {\n    URL.revokeObjectURL(url);\n  };\n  // ...\n  <img :src=\"url\" @load=\"revoke\" @error=\"revoke\" alt=\"\" />\n */\nexport class BlobImageResize {\n  /**\n   * @param {Blob} blob 변경할 원본 Blob\n   * @param {ResizeConfig} [config={}] 리사이징 옵션\n   */\n  constructor(blob: Blob, config: ResizeConfig = {}) {\n    this.blob = blob;\n    const {\n      expectWidth = 2000,\n      expectHeight = 2000,\n      quality = 0.9,\n      resizeType = ResizeType.SCALE,\n    } = config;\n    this.quality = quality;\n    this.maxWidth = expectWidth;\n    this.maxHeight = expectHeight;\n    this.resizeType = resizeType;\n  }\n\n  // 리사이징 대상 Blob\n  protected blob: Blob;\n  // 리사이징 대상 Blob 의 URL\n  protected blobURL: string;\n  // 리사이징 대상 Blob 을 로드할 이미지\n  protected domImage: HTMLImageElement;\n  // 리사이징 대상 이미지를 그려낼 캔버스\n  protected domCanvas: HTMLCanvasElement;\n  protected domCanvasContext: CanvasRenderingContext2D;\n  // 캔버스에서 만들어낼 이미지 퀄리티\n  protected quality: number;\n  // 리사이징 최대 사이즈\n  protected maxWidth: number;\n  protected maxHeight: number;\n  // 리사이징 할 때 캔버스에 그려낼 사이즈 타입\n  protected resizeType: ResizeType;\n  // 리사이징 완료된 Blob\n  protected resizeBlob: Blob;\n  // 응답용 promize\n  protected promise: Promise<ResizeResult>;\n  protected promiseResolve: (value: ResizeResult) => void;\n  protected promiseReject: (reason?: any) => void;\n\n  /**\n   * 리사이징 타입 - SCALE 형\n   * 정해진 expect 사이즈를 최대 사이즈로 비율에 맞춤.\n   * @param {number} sw\n   * @param {number} sh\n   * @returns {DrawBound}\n   * @example\n    const resizer = new BlobImageResize(null, { expectWidth: 200, expectHeight: 200 });\n    // dx, dy 모두 0\n    console.log(resizer.getResizeToScale(100, 100)); // 결과이미지: 100x100\n    console.log(resizer.getResizeToScale(100, 200)); // 결과이미지: 100x200\n    console.log(resizer.getResizeToScale(100, 300)); // 결과이미지: 66x200\n    console.log(resizer.getResizeToScale(200, 100)); // 결과이미지: 200x100\n    console.log(resizer.getResizeToScale(200, 200)); // 결과이미지: 200x200\n    console.log(resizer.getResizeToScale(200, 300)); // 결과이미지: 133x200\n    console.log(resizer.getResizeToScale(300, 100)); // 결과이미지: 200x66\n    console.log(resizer.getResizeToScale(300, 200)); // 결과이미지: 200x133\n    console.log(resizer.getResizeToScale(300, 300)); // 결과이미지: 200x200\n   */\n  getResizeToScale(sw: number, sh: number): DrawBound {\n    const dx: number = 0;\n    const dy: number = 0;\n    let dw: number = 0;\n    let dh: number = 0;\n    const isLandscape: boolean = sh <= sw;\n    if (isLandscape) {\n      dw = Math.min(this.maxWidth, sw);\n      dh = Math.floor((dw / sw) * sh);\n    } else {\n      dh = Math.min(this.maxWidth, sh);\n      dw = Math.floor((dh / sh) * sw);\n    }\n    return {\n      dx,\n      dy,\n      dw,\n      dh,\n    };\n  }\n\n  /**\n   * 리사이징 타입 - COVER 형\n   * 정해진 expect 사이즈에 빈 여백 없이 맞춤, 원본 이미지가 작으면 늘리고, 넘치면 잘려나감.\n   * @param {number} sw\n   * @param {number} sh\n   * @returns {DrawBound}\n   * @example\n    const resizer = new BlobImageResize(null, { expectWidth: 200, expectHeight: 200 });\n    // 결과 이미지 모두 200x200\n    console.log(resizer.getResizeToCover(100, 100)); // {dx: 0, dy: 0, dw: 200, dh: 200}\n    console.log(resizer.getResizeToCover(100, 200)); // {dx: 0, dy: -100, dw: 200, dh: 400}\n    console.log(resizer.getResizeToCover(100, 300)); // {dx: 0, dy: -200, dw: 200, dh: 600}\n    console.log(resizer.getResizeToCover(200, 100)); // {dx: -100, dy: 0, dw: 400, dh: 200}\n    console.log(resizer.getResizeToCover(200, 200)); // {dx: 0, dy: 0, dw: 200, dh: 200}\n    console.log(resizer.getResizeToCover(200, 300)); // {dx: 0, dy: -50, dw: 200, dh: 300}\n    console.log(resizer.getResizeToCover(300, 100)); // {dx: -200, dy: 0, dw: 600, dh: 200}\n    console.log(resizer.getResizeToCover(300, 200)); // {dx: -50, dy: 0, dw: 300, dh: 200}\n    console.log(resizer.getResizeToCover(300, 300)); // {dx: 0, dy: 0, dw: 200, dh: 200}\n   */\n  getResizeToCover(sw: number, sh: number): DrawBound {\n    let dx: number = 0;\n    let dy: number = 0;\n    let dw: number = 0;\n    let dh: number = 0;\n    let expectRatio: number = this.maxWidth / this.maxHeight;\n    let contentRatio: number = sw / sh;\n    if (expectRatio < contentRatio) {\n      dh = this.maxHeight;\n      dw = this.maxHeight * contentRatio;\n    } else {\n      dw = this.maxWidth;\n      dh = this.maxWidth / contentRatio;\n    }\n    dx = (this.maxWidth - dw) * 0.5;\n    dy = (this.maxHeight - dh) * 0.5;\n    return {\n      dx,\n      dy,\n      dw,\n      dh,\n    };\n  }\n\n  /**\n   * 이미지 로드 완료\n   * @protected\n   */\n  protected onImageLoaded() {\n    URL.revokeObjectURL(this.blobURL);\n    const imageWidth = this.domImage.naturalWidth;\n    const imageHeight = this.domImage.naturalHeight;\n    let drawBound: DrawBound;\n    if (this.resizeType === ResizeType.COVER) {\n      drawBound = this.getResizeToCover(imageWidth, imageHeight);\n      this.domCanvas.width = this.maxWidth;\n      this.domCanvas.height = this.maxHeight;\n    } else {\n      drawBound = this.getResizeToScale(imageWidth, imageHeight);\n      this.domCanvas.width = drawBound.dw;\n      this.domCanvas.height = drawBound.dh;\n    }\n    const { dx, dy, dw, dh } = drawBound;\n    this.domCanvasContext.drawImage(this.domImage, 0, 0, imageWidth, imageHeight, dx, dy, dw, dh);\n    // this.domCanvas.toBlob(this.onResized.bind(this), this.blob.type, this.quality);\n    this.domCanvas.toBlob(this.onResized.bind(this), 'image/jpeg', this.quality); // type 이 jpeg 로 하지 않는 경우 quality 적용이 안되는듯\n  }\n\n  /**\n   * 이미지 로드 오류\n   * @protected\n   */\n  protected onImageError() {\n    URL.revokeObjectURL(this.blobURL);\n    this.promiseReject({\n      ...this.getState(),\n      error: new Error('image load error'),\n    });\n  }\n\n  /**\n   * 이미지 리사이징 완료\n   * @protected\n   * @param {Blob} resizeBlob\n   */\n  protected onResized(resizeBlob: Blob) {\n    this.resizeBlob = resizeBlob;\n    this.promiseResolve(this.getState());\n  }\n\n  /**\n   * 리사이징 이미지 생성하기\n   * @returns {Promise<ResizeResult>}\n   */\n  create(): Promise<ResizeResult> {\n    this.domCanvas = document.createElement('canvas');\n    this.domCanvasContext = this.domCanvas.getContext('2d');\n    this.domImage = new Image();\n    this.domImage.onload = this.onImageLoaded.bind(this);\n    this.domImage.onerror = this.onImageError.bind(this);\n    this.promise = new Promise((resolve, reject) => {\n      this.promiseResolve = resolve;\n      this.promiseReject = reject;\n      try {\n        this.blobURL = URL.createObjectURL(this.blob);\n        this.domImage.src = this.blobURL;\n      } catch (err) {\n        this.promiseReject({\n          ...this.getState(),\n          error: err,\n        });\n      }\n    });\n    return this.promise;\n  }\n\n  getState(): ResizeResult {\n    const blob = this.resizeBlob || null;\n    const { width = 0, height = 0 } = this.domCanvas || {};\n    return {\n      blob: blob,\n      width: blob ? width : 0,\n      height: blob ? height : 0,\n    };\n  }\n}\n","export * from './types';\nexport * from './BlobImageResize';\n","/**\n * 리사이즈 타입\n *  - SCALE: 최대 크기에 맞춤, 이미지 비율 유지.\n *  - COVER: 최대 크기에 맞춤, 이미지 넘치면 잘라냄.\n * @export\n * @enum {number}\n */\nexport enum ResizeType {\n  SCALE,\n  COVER,\n}\n\n/**\n * 리사이즈 옵션\n * @export\n * @interface ResizeConfig\n */\nexport interface ResizeConfig {\n  /**\n   * 리사이즈 예상 width\n   * @type {number}\n   */\n  expectWidth?: number;\n  /**\n   * 리사이즈 예상 height\n   * @type {number}\n   */\n  expectHeight?: number;\n  /**\n   * 이미지 품질\n   * @type {number}\n   */\n  quality?: number;\n  /**\n   * 리사이즈 타입\n   * @type {ResizeType}\n   */\n  resizeType?: ResizeType;\n}\n\n/**\n * 리사이즈 결과\n * @export\n * @interface ResizeResult\n */\nexport interface ResizeResult {\n  /**\n   * 리사이즈 된 Blob\n   * @type {Blob}\n   */\n  blob: Blob;\n  /**\n   * 리사이즈 된 width 사이즈\n   * @type {number}\n   */\n  width: number;\n  /**\n   * 리사이즈 된 height 사이즈\n   * @type {number}\n   */\n  height: number;\n  /**\n   * 오류가 있는 경우\n   * @type {*}\n   * @memberof ResizeResult\n   */\n  error?: any;\n}\n\n/**\n * 리사이즈 계산 정보\n * @interface DrawBound\n */\nexport interface DrawBound {\n  dx: number;\n  dy: number;\n  dw: number;\n  dh: number;\n}\n","export * from \"./read-stream\";\nexport * from \"./blob-image\";\n","/* eslint-disable */\nimport { Subject, Observable } from 'rxjs';\nimport {\n  FileReadEventType,\n  FileReadEvent,\n  FileReadState,\n  FileReadConfig,\n  FileReadResponseType,\n} from './types';\n\n/**\n * 파일 스트림 읽기.\n * FileReader 사용시 한번에 못 읽는 용량 끊어서 읽기 용.\n * @class FileReadStream\n * @example\n  const onFileInputChange = async (evt: Event) => {\n    const target = evt.target as HTMLInputElement;\n    const file = target.files[0];\n    const reader = new FileReadStream(file, { chunkSize: 1024 * 10 });\n    // reader.observeState().subscribe({ type, state } => console.log(state.readed));\n    const { type, state } = await reader.start();\n    if (type === FileReadEventType.RESOLVE) {\n      console.log(state.blob);\n    } else if (type === FileReadEventType.REJECT) {\n      console.log('error');\n    }\n  }\n */\nexport class FileReadStream {\n  /**\n   * @param {File} file FileReader 로 읽을 파일\n   * @param {FileReadConfig} [config={}] 스트림 옵션\n   */\n  constructor(file: File, config: FileReadConfig = {}) {\n    this.readFile = file;\n    this.reader = new FileReader();\n    this.reader.onload = this.onReaderLoaded.bind(this);\n    this.reader.onerror = this.onReaderError.bind(this);\n    this.subjectState = new Subject();\n    const { chunkSize = 1024 * 1024 * 10, responseType = FileReadResponseType.BLOB } = config;\n    this.readChunkSize = chunkSize;\n    this.responseType = responseType;\n  }\n\n  // 변경사항 알리미 @see https://rxjs-dev.firebaseapp.com\n  protected subjectState: Subject<FileReadEvent>;\n  // 파일 리더\n  protected reader: FileReader;\n  // 읽을 파일\n  protected readFile: File;\n  // 읽기 시작 여부\n  protected readStarted: boolean = false;\n  // 1회 읽을량\n  protected readChunkSize: number;\n  // 현재 읽기 offset\n  protected readOffset: number = 0;\n  // 현재 읽어야할 offset\n  protected readOffsetNext: number = 0;\n  // 현재 읽은량\n  protected readCurrent: number = 0;\n  // 현재 취소 상태인지 확인용\n  protected readStateAbort: boolean = false;\n  // 읽은 버퍼\n  protected buffers: ArrayBuffer[] = [];\n  // 응답시 파일 타입\n  protected responseType: FileReadResponseType;\n  // subjectState 로 진행(완료) 상태를 받을 수 있지만, 편의용 async/await 도 제공\n  protected readPromise: Promise<FileReadEvent>;\n  protected readPromiseResolve: (value: FileReadEvent) => void;\n  protected readPromiseReject: (reason?: any) => void;\n\n  /**\n   * 파일 읽기 1회 완료\n   * @protected\n   * @param {Event} evt\n   */\n  protected onReaderLoaded(evt: Event) {\n    this.readCurrent = this.readOffsetNext;\n    this.readOffset += this.readChunkSize;\n    this.buffers.push(this.reader.result as ArrayBuffer);\n    this.stateChanged();\n    this.next();\n  }\n\n  /**\n   * 파일 읽기 1회 오류\n   * @protected\n   * @param {Event} evt\n   */\n  protected onReaderError(evt: Event) {\n    this.resultReject(new Error('file reader onerror event'));\n  }\n\n  /**\n   * 다음 구간 읽기\n   * @protected\n   */\n  protected next() {\n    if (this.readStateAbort) {\n      return;\n    }\n    try {\n      const maxSize = this.readFile.size;\n      if (maxSize <= this.readOffset) {\n        this.resultResolve();\n        return;\n      }\n      let expectNext = this.readOffset + this.readChunkSize;\n      if (maxSize <= expectNext) expectNext = maxSize;\n      this.readOffsetNext = expectNext;\n      const sliceBlob = this.readFile.slice(this.readOffset, this.readOffsetNext);\n      this.reader.readAsArrayBuffer(sliceBlob);\n    } catch (err) {\n      this.resultReject(err);\n    }\n  }\n\n  /**\n   * state 변경 시 알림\n   * @protected\n   */\n  protected stateChanged() {\n    this.subjectState.next({\n      type: FileReadEventType.CHANGE,\n      state: this.getState(),\n    });\n  }\n\n  /**\n   * 완료 시 알림\n   * @protected\n   */\n  protected resultResolve() {\n    const result: FileReadEvent = {\n      type: FileReadEventType.RESOLVE,\n      state: this.getState(),\n    };\n    this.reader.onload = null;\n    this.reader.onerror = null;\n    this.readPromiseResolve(result);\n    this.subjectState.next(result);\n  }\n\n  /**\n   * 실패 시 알림\n   * @protected\n   * @param {*} reason\n   */\n  protected resultReject(reason: any, type: FileReadEventType = FileReadEventType.REJECT) {\n    const result: FileReadEvent = {\n      type,\n      state: null,\n      error: reason,\n    };\n    this.reader.onload = null;\n    this.reader.onerror = null;\n    this.readPromiseReject(result);\n    this.subjectState.next(result);\n  }\n\n  /**\n   * 읽기 시작\n   * @returns {Promise<FileReadEvent>}\n   */\n  start(): Promise<FileReadEvent> {\n    if (this.readStarted) return;\n    this.readStarted = true;\n    this.readPromise = new Promise((resolve, reject) => {\n      this.readPromiseResolve = resolve;\n      this.readPromiseReject = reject;\n    });\n    this.next();\n    return this.readPromise;\n  }\n\n  /**\n   * 상태변경 옵저버\n   * @returns {Observable<FileReadEvent>}\n   */\n  observeState(): Observable<FileReadEvent> {\n    return this.subjectState.asObservable();\n  }\n\n  /**\n   * 현재 상태\n   * @returns {FileReadState}\n   */\n  getState(): FileReadState {\n    const { name = null, type = null, size = 0, lastModified = Date.now() } = this.readFile || {};\n    const state: FileReadState = {\n      fileName: name,\n      fileType: type,\n      fileSize: size,\n      fileLastModified: lastModified,\n      total: size,\n      readed: this.readCurrent,\n      responseType: this.responseType,\n      chunkSize: this.readChunkSize,\n    };\n    switch (this.responseType) {\n      case FileReadResponseType.BLOB:\n        state.blob = new Blob(this.buffers, { type });\n        break;\n      case FileReadResponseType.BUFFER:\n        state.buffers = this.buffers;\n        break;\n    }\n    return state;\n  }\n\n  /**\n   * 파일 읽기 중단\n   */\n  abort(): void {\n    this.readStateAbort = true;\n    if (this.reader) {\n      this.reader.abort();\n      this.reader.onload = null;\n      this.reader.onerror = null;\n      this.resultReject(new Error('file reader abort event'), FileReadEventType.ABORT);\n    }\n  }\n\n  /**\n   * 파기\n   */\n  destroy() {\n    if (this.reader) {\n      this.reader.abort();\n      this.reader.onload = null;\n      this.reader.onerror = null;\n      this.reader = null;\n    }\n    this.readFile = null;\n  }\n}\n","/**\n * dependencies\n * - rxjs: https://rxjs-dev.firebaseapp.com\n */\n\nexport * from './types';\nexport * from './FileReadStream';\n","/**\n * 스트림 이벤트 타입\n *  - CHANGE: 변경사항이 있음\n *  - RESOLVE: 완료\n *  - REJECT: 오류\n * @export\n * @enum {string}\n */\nexport enum FileReadEventType {\n  CHANGE = 'CHANGE',\n  RESOLVE = 'RESOLVE',\n  REJECT = 'REJECT',\n  ABORT = 'ABORT',\n}\n\n/**\n * 스트림 이벤트\n * @export\n * @interface FileReadEvent\n */\nexport interface FileReadEvent {\n  /**\n   * 이벤트 타입명\n   * @type {FileReadEventType}\n   */\n  type: FileReadEventType;\n  /**\n   * 스트림 상태\n   * @type {FileReadState}\n   */\n  state: FileReadState;\n  /**\n   * 오류\n   * @type {*}\n   */\n  error?: any;\n}\n\n/**\n * 스트림 상태 정보\n * @export\n * @interface FileReadState\n */\nexport interface FileReadState {\n  /**\n   * 파일명\n   * @type {string}\n   */\n  fileName: string;\n  /**\n   * 파일의 (Mime)타입\n   * @type {string}\n   */\n  fileType: string;\n  /**\n   * 파일의 용량\n   * @type {number}\n   */\n  fileSize: number;\n  /**\n   * 파일의 마지막 수정시간\n   * @type {number}\n   */\n  fileLastModified: number;\n  /**\n   * 읽어들인 용량\n   * @type {number}\n   */\n  readed: number;\n  /**\n   * 읽어내야할 용량(파일 용량)\n   * @type {number}\n   */\n  total: number;\n  /**\n   * 1회 읽기시 읽어들일 용량\n   * @type {number}\n   */\n  chunkSize: number;\n  /**\n   * 읽기 완료 후 반환 타입\n   * @type {FileReadResponseType}\n   */\n  responseType: FileReadResponseType;\n  /**\n   * responseType 이 BUFFER 인 경우 반환하는 ArrayBuffer[]\n   * @type {ArrayBuffer[]}\n   */\n  buffers?: ArrayBuffer[];\n  /**\n   * responseType 이 BLOB 인 경우 반환하는 Blob\n   * @type {Blob}\n   */\n  blob?: Blob;\n}\n\n/**\n * 스트림 옵션\n * @export\n * @interface FileReadConfig\n */\nexport interface FileReadConfig {\n  /**\n   * 1회에 읽어들일 용량\n   * @type {number}\n   */\n  chunkSize?: number;\n  /**\n   * 읽기 완료 후 반환 타입\n   * @type {FileReadResponseType}\n   */\n  responseType?: FileReadResponseType;\n}\n\n/**\n * 스트립 상태 정보 중 완료시 파일 타입.\n *  - BUFFER: ArrayBuffer[] 타입\n *  - BLOB: Blob 타입\n * @export\n * @enum {string}\n */\nexport enum FileReadResponseType {\n  BUFFER = 'BUFFER',\n  BLOB = 'BLOB',\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  imports: [CommonModule],\n  // exports: [SampleActorComponent],\n  // declarations: [SampleActorComponent],\n})\nexport class ExampleCommonModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJwcm9qZWN0cy9kZXYvc3JjL2FwcC9wYWdlcy9kZW1vL2Jsb2ItaW1hZ2UvYmxvYi1pbWFnZS5jb21wb25lbnQuc2NzcyJ9 */\";","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'demo-blob-image',\n  templateUrl: './blob-image.component.html',\n  styleUrls: ['./blob-image.component.scss'],\n})\nexport class BlobImageComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit() {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RoutingModule } from '~/dev/app/pages/demo/demo.routing';\nimport { SharedModule } from '~/dev/app/shared/shared.module';\nimport { ExampleCommonModule } from '~/dev/app/modules/example/common/common.module';\nimport { ReadStreamComponent } from './read-stream/read-stream.component';\nimport { BlobImageComponent } from './blob-image/blob-image.component';\n\n@NgModule({\n  imports: [CommonModule, RoutingModule, SharedModule, ExampleCommonModule],\n  declarations: [ReadStreamComponent, BlobImageComponent],\n})\nexport class PageModule {}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ReadStreamComponent } from './read-stream/read-stream.component';\nimport { BlobImageComponent } from './blob-image/blob-image.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    children: [\n      {\n        path: 'read-stream',\n        component: ReadStreamComponent,\n      },\n      {\n        path: 'blob-image',\n        component: BlobImageComponent,\n      },\n      {\n        path: '**',\n        component: ReadStreamComponent,\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class RoutingModule {}\n","export default \".partition {\\n  display: block;\\n  margin: 30px 0;\\n  padding: 0;\\n  height: 1px;\\n  border: none;\\n  background-color: #eeeeee;\\n}\\n\\n.print-stack .stack-opt {\\n  display: flex;\\n  align-items: center;\\n}\\n\\n.print-stack .stack-opt .spacer {\\n  flex: 1;\\n}\\n\\n.print-stack .stack-count {\\n  padding: 5px 0;\\n  text-align: right;\\n  font-size: 14px;\\n}\\n\\n.print-stack .stack-list {\\n  display: block;\\n  margin-top: 5px;\\n  height: 400px;\\n  overflow: auto;\\n  border: 1px solid #999999;\\n}\\n\\n.print-stack .stack-item {\\n  display: flex;\\n  align-items: center;\\n  margin: 3px;\\n  padding: 5px;\\n  font-size: 14px;\\n  border: 1px solid #cccccc;\\n  box-sizing: border-box;\\n}\\n\\n.print-stack .stack-item .aside {\\n  width: 90px;\\n}\\n\\n.print-stack .stack-item .bside {\\n  flex: 1;\\n  display: flex;\\n  flex-wrap: wrap;\\n}\\n\\n.print-stack .stack-item .label {\\n  flex: 1;\\n}\\n\\n.print-stack .stack-item .label .dt {\\n  display: block;\\n  font-size: 12px;\\n  color: #888888;\\n}\\n\\n.print-stack .stack-item .label .dd {\\n  display: block;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByb2plY3RzL2Rldi9zcmMvYXBwL3BhZ2VzL2RlbW8vcmVhZC1zdHJlYW0vcmVhZC1zdHJlYW0uY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxjQUFBO0VBQ0EsY0FBQTtFQUNBLFVBQUE7RUFDQSxXQUFBO0VBQ0EsWUFBQTtFQUNBLHlCQUFBO0FBQ0Y7O0FBR0U7RUFDRSxhQUFBO0VBQ0EsbUJBQUE7QUFBSjs7QUFDSTtFQUNFLE9BQUE7QUFDTjs7QUFFRTtFQUNFLGNBQUE7RUFDQSxpQkFBQTtFQUNBLGVBQUE7QUFBSjs7QUFFRTtFQUNFLGNBQUE7RUFDQSxlQUFBO0VBQ0EsYUFBQTtFQUNBLGNBQUE7RUFDQSx5QkFBQTtBQUFKOztBQUVFO0VBQ0UsYUFBQTtFQUNBLG1CQUFBO0VBQ0EsV0FBQTtFQUNBLFlBQUE7RUFDQSxlQUFBO0VBQ0EseUJBQUE7RUFDQSxzQkFBQTtBQUFKOztBQUVJO0VBQ0UsV0FBQTtBQUFOOztBQUVJO0VBQ0UsT0FBQTtFQUNBLGFBQUE7RUFDQSxlQUFBO0FBQU47O0FBRUk7RUFDRSxPQUFBO0FBQU47O0FBQ007RUFDRSxjQUFBO0VBQ0EsZUFBQTtFQUNBLGNBQUE7QUFDUjs7QUFDTTtFQUNFLGNBQUE7QUFDUiIsImZpbGUiOiJwcm9qZWN0cy9kZXYvc3JjL2FwcC9wYWdlcy9kZW1vL3JlYWQtc3RyZWFtL3JlYWQtc3RyZWFtLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLnBhcnRpdGlvbiB7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBtYXJnaW46IDMwcHggMDtcbiAgcGFkZGluZzogMDtcbiAgaGVpZ2h0OiAxcHg7XG4gIGJvcmRlcjogbm9uZTtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2VlZWVlZTtcbn1cblxuLnByaW50LXN0YWNrIHtcbiAgLnN0YWNrLW9wdCB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIC5zcGFjZXIge1xuICAgICAgZmxleDogMTtcbiAgICB9XG4gIH1cbiAgLnN0YWNrLWNvdW50IHtcbiAgICBwYWRkaW5nOiA1cHggMDtcbiAgICB0ZXh0LWFsaWduOiByaWdodDtcbiAgICBmb250LXNpemU6IDE0cHg7XG4gIH1cbiAgLnN0YWNrLWxpc3Qge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIG1hcmdpbi10b3A6IDVweDtcbiAgICBoZWlnaHQ6IDQwMHB4O1xuICAgIG92ZXJmbG93OiBhdXRvO1xuICAgIGJvcmRlcjogMXB4IHNvbGlkICM5OTk5OTk7XG4gIH1cbiAgLnN0YWNrLWl0ZW0ge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBtYXJnaW46IDNweDtcbiAgICBwYWRkaW5nOiA1cHg7XG4gICAgZm9udC1zaXplOiAxNHB4O1xuICAgIGJvcmRlcjogMXB4IHNvbGlkICNjY2NjY2M7XG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcblxuICAgIC5hc2lkZSB7XG4gICAgICB3aWR0aDogOTBweDtcbiAgICB9XG4gICAgLmJzaWRlIHtcbiAgICAgIGZsZXg6IDE7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgZmxleC13cmFwOiB3cmFwO1xuICAgIH1cbiAgICAubGFiZWwge1xuICAgICAgZmxleDogMTtcbiAgICAgIC5kdCB7XG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICBmb250LXNpemU6IDEycHg7XG4gICAgICAgIGNvbG9yOiAjODg4ODg4O1xuICAgICAgfVxuICAgICAgLmRkIHtcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iXX0= */\";","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport { FileReadStream, FileReadEventType, FileReadEvent } from 'projects/packages/src/public-api';\n\n@Component({\n  selector: 'demo-read-stream',\n  templateUrl: './read-stream.component.html',\n  styleUrls: ['./read-stream.component.scss'],\n})\nexport class ReadStreamComponent implements OnInit {\n  constructor() {}\n\n  reader: FileReadStream;\n  testChunkSize = 1024;\n  optionChunkList = [];\n  changeStack: FileReadEvent[] = [];\n  changeStackCount: number = 0;\n  changeStackDisplayMax: number = 50;\n\n  ngOnInit() {\n    this.optionChunkList = Array.from(Array(8)).map((a, b) => {\n      const index = b + 1;\n      const byte = Math.pow(index * index * 32, 2);\n      const kb = byte / 1024;\n      const mb = kb / 1024;\n      const label = mb < 1 ? `${kb}kb` : `${mb.toFixed(2)}mb`;\n      return {\n        value: byte,\n        label,\n      };\n    });\n    this.testChunkSize = this.optionChunkList[3].value;\n  }\n\n  onFileChange(evt) {\n    const { files = [] } = (evt && evt.target) || {};\n    const file = files[0];\n    if (!file) return;\n    this.readStart(file);\n    evt.target.value = null;\n  }\n\n  onFileAbort() {\n    if (this.reader) {\n      this.reader.abort();\n      this.reader.destroy();\n      this.reader = null;\n    }\n  }\n\n  readStart(file: File) {\n    this.changeStack = [];\n    this.changeStackCount = 0;\n    if (this.reader) {\n      this.reader.destroy();\n      this.reader = null;\n    }\n    this.reader = new FileReadStream(file, {\n      chunkSize: this.testChunkSize,\n    });\n    this.reader.observeState().subscribe((evt) => {\n      const { type, state } = evt;\n      this.changeStackCount++;\n      this.changeStack.push({ type, state });\n      if (this.changeStackDisplayMax < this.changeStack.length) {\n        this.changeStack.shift();\n      }\n      switch (type) {\n        case FileReadEventType.RESOLVE:\n        case FileReadEventType.REJECT:\n          this.reader.destroy();\n          this.reader = null;\n          break;\n      }\n    });\n    this.reader.start().catch((err) => console.log(err));\n  }\n}\n"]}